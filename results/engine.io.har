{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2017-08-28T14:04:08.784Z",
        "id": "page_107",
        "title": "https://espirit.husker:8001/engine.io/",
        "pageTimings": {
          "onContentLoad": 348.2429999858141,
          "onLoad": 347.6319999899715
        }
      }
    ],
    "entries": [
      {
        "startedDateTime": "2017-08-28T14:04:08.784Z",
        "time": 3.2240001019090414,
        "request": {
          "method": "GET",
          "url": "https://espirit.husker:8001/engine.io/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "espirit.husker:8001"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
            },
            {
              "name": "Referer",
              "value": "https://espirit.husker:8000/"
            },
            {
              "name": "Cookie",
              "value": "io=Mlz-B0JALT9Lg99MAAAC"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "Mlz-B0JALT9Lg99MAAAC",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 523,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Mon, 28 Aug 2017 14:04:08 GMT"
            },
            {
              "name": "Last-Modified",
              "value": "Mon, 28 Aug 2017 13:44:19 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"166-15e2915f738\""
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=UTF-8"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Content-Length",
              "value": "358"
            }
          ],
          "cookies": [],
          "content": {
            "size": 358,
            "mimeType": "text/html",
            "compression": 0,
            "text": "<!doctype html>\n<html>\n\t<head>\n\t\t<title>Primus - Engine.IO</title>\n\t</head>\n\t<body>\n\t\t<h1></h1>\n\t\t<script src=\"primus.js\"></script>\n\t\t<script>\n\t\t\tvar primus = new Primus();\n\t\t\tvar i = 0;\n\n\t\t\tprimus.on('data', function(data) {\n\t\t\t\tdocument.querySelector('h1').innerHTML = data;\n\n\t\t\t\tif(++i >= 5) {\n\t\t\t\t\tprimus.end();\n\t\t\t\t}\n\t\t\t});\n\t\t</script>\n\t</body>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": 270,
          "bodySize": 358,
          "_transferSize": 628
        },
        "cache": {},
        "timings": {
          "blocked": 0.430000014603138,
          "dns": -1,
          "connect": -1,
          "send": 0.07800012826919595,
          "wait": 1.436999998986716,
          "receive": 1.2789999600499915,
          "ssl": -1
        },
        "serverIPAddress": "127.0.0.1",
        "connection": "101562",
        "pageref": "page_107"
      },
      {
        "startedDateTime": "2017-08-28T14:04:08.796Z",
        "time": 4.050000105053186,
        "request": {
          "method": "GET",
          "url": "https://espirit.husker:8001/engine.io/primus.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "espirit.husker:8001"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "https://espirit.husker:8001/engine.io/"
            },
            {
              "name": "Cookie",
              "value": "io=Mlz-B0JALT9Lg99MAAAC"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "Mlz-B0JALT9Lg99MAAAC",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 430,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Mon, 28 Aug 2017 14:04:08 GMT"
            },
            {
              "name": "Last-Modified",
              "value": "Mon, 28 Aug 2017 14:03:59 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"2b0c1-15e2927f898\""
            },
            {
              "name": "Content-Type",
              "value": "application/javascript"
            },
            {
              "name": "Cache-Control",
              "value": "public, max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Content-Length",
              "value": "176321"
            }
          ],
          "cookies": [],
          "content": {
            "size": 176321,
            "mimeType": "application/javascript",
            "compression": 0,
            "text": "(function UMDish(name, context, definition, plugins) {\n  context[name] = definition.call(context);\n  for (var i = 0; i < plugins.length; i++) {\n    plugins[i](context[name])\n  }\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = context[name];\n  } else if (typeof define === \"function\" && define.amd) {\n    define(function reference() { return context[name]; });\n  }\n})(\"Primus\", this || {}, function wrapper() {\n  var define, module, exports\n    , Primus = (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\n/**\n * Create a function that will cleanup the instance.\n *\n * @param {Array|String} keys Properties on the instance that needs to be cleared.\n * @param {Object} options Additional configuration.\n * @returns {Function} Destroy function\n * @api public\n */\nmodule.exports = function demolish(keys, options) {\n  var split = /[, ]+/;\n\n  options = options ||  {};\n  keys = keys || [];\n\n  if ('string' === typeof keys) keys = keys.split(split);\n\n  /**\n   * Run addition cleanup hooks.\n   *\n   * @param {String} key Name of the clean up hook to run.\n   * @param {Mixed} selfie Reference to the instance we're cleaning up.\n   * @api private\n   */\n  function run(key, selfie) {\n    if (!options[key]) return;\n    if ('string' === typeof options[key]) options[key] = options[key].split(split);\n    if ('function' === typeof options[key]) return options[key].call(selfie);\n\n    for (var i = 0, type, what; i < options[key].length; i++) {\n      what = options[key][i];\n      type = typeof what;\n\n      if ('function' === type) {\n        what.call(selfie);\n      } else if ('string' === type && 'function' === typeof selfie[what]) {\n        selfie[what]();\n      }\n    }\n  }\n\n  /**\n   * Destroy the instance completely and clean up all the existing references.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n  return function destroy() {\n    var selfie = this\n      , i = 0\n      , prop;\n\n    if (selfie[keys[0]] === null) return false;\n    run('before', selfie);\n\n    for (; i < keys.length; i++) {\n      prop = keys[i];\n\n      if (selfie[prop]) {\n        if ('function' === typeof selfie[prop].destroy) selfie[prop].destroy();\n        selfie[prop] = null;\n      }\n    }\n\n    if (selfie.emit) selfie.emit('destroy');\n    run('after', selfie);\n\n    return true;\n  };\n};\n\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\n\n/**\n * Returns a function that when invoked executes all the listeners of the\n * given event with the given arguments.\n *\n * @returns {Function} The function that emits all the things.\n * @api public\n */\nmodule.exports = function emits() {\n  var self = this\n    , parser;\n\n  for (var i = 0, l = arguments.length, args = new Array(l); i < l; i++) {\n    args[i] = arguments[i];\n  }\n\n  //\n  // If the last argument is a function, assume that it's a parser.\n  //\n  if ('function' !== typeof args[args.length - 1]) return function emitter() {\n    for (var i = 0, l = arguments.length, arg = new Array(l); i < l; i++) {\n      arg[i] = arguments[i];\n    }\n\n    return self.emit.apply(self, args.concat(arg));\n  };\n\n  parser = args.pop();\n\n  /**\n   * The actual function that emits the given event. It returns a boolean\n   * indicating if the event was emitted.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n  return function emitter() {\n    for (var i = 0, l = arguments.length, arg = new Array(l + 1); i < l; i++) {\n      arg[i + 1] = arguments[i];\n    }\n\n    /**\n     * Async completion method for the parser.\n     *\n     * @param {Error} err Optional error when parsing failed.\n     * @param {Mixed} returned Emit instructions.\n     * @api private\n     */\n    arg[0] = function next(err, returned) {\n      if (err) return self.emit('error', err);\n\n      arg = returned === undefined\n        ? arg.slice(1) : returned === null\n          ? [] : returned;\n\n      self.emit.apply(self, args.concat(arg));\n    };\n\n    parser.apply(self, arg);\n    return true;\n  };\n};\n\n},{}],3:[function(_dereq_,module,exports){\n'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @api private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {Mixed} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Boolean} exists Only check if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn The listener function.\n * @param {Mixed} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;\n  else if (!this._events[evt].fn) this._events[evt].push(listener);\n  else this._events[evt] = [this._events[evt], listener];\n\n  return this;\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {String|Symbol} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {Mixed} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n         listeners.fn === fn\n      && (!once || listeners.once)\n      && (!context || listeners.context === context)\n    ) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n           listeners[i].fn !== fn\n        || (once && !listeners[i].once)\n        || (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else if (--this._eventsCount === 0) this._events = new Events();\n    else delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {String|Symbol} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) {\n      if (--this._eventsCount === 0) this._events = new Events();\n      else delete this._events[evt];\n    }\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n},{}],4:[function(_dereq_,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],5:[function(_dereq_,module,exports){\n'use strict';\n\nvar regex = new RegExp('^((?:\\\\d+)?\\\\.?\\\\d+) *('+ [\n  'milliseconds?',\n  'msecs?',\n  'ms',\n  'seconds?',\n  'secs?',\n  's',\n  'minutes?',\n  'mins?',\n  'm',\n  'hours?',\n  'hrs?',\n  'h',\n  'days?',\n  'd',\n  'weeks?',\n  'wks?',\n  'w',\n  'years?',\n  'yrs?',\n  'y'\n].join('|') +')?$', 'i');\n\nvar second = 1000\n  , minute = second * 60\n  , hour = minute * 60\n  , day = hour * 24\n  , week = day * 7\n  , year = day * 365;\n\n/**\n * Parse a time string and return the number value of it.\n *\n * @param {String} ms Time string.\n * @returns {Number}\n * @api private\n */\nmodule.exports = function millisecond(ms) {\n  var type = typeof ms\n    , amount\n    , match;\n\n  if ('number' === type) return ms;\n  else if ('string' !== type || '0' === ms || !ms) return 0;\n  else if (+ms) return +ms;\n\n  //\n  // We are vulnerable to the regular expression denial of service (ReDoS).\n  // In order to mitigate this we don't parse the input string if it is too long.\n  // See https://nodesecurity.io/advisories/46.\n  //\n  if (ms.length > 10000 || !(match = regex.exec(ms))) return 0;\n\n  amount = parseFloat(match[1]);\n\n  switch (match[2].toLowerCase()) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return amount * year;\n\n    case 'weeks':\n    case 'week':\n    case 'wks':\n    case 'wk':\n    case 'w':\n      return amount * week;\n\n    case 'days':\n    case 'day':\n    case 'd':\n      return amount * day;\n\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return amount * hour;\n\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return amount * minute;\n\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return amount * second;\n\n    default:\n      return amount;\n  }\n};\n\n},{}],6:[function(_dereq_,module,exports){\n'use strict';\n\n/**\n * Wrap callbacks to prevent double execution.\n *\n * @param {Function} fn Function that should only be called once.\n * @returns {Function} A wrapped callback which prevents execution.\n * @api public\n */\nmodule.exports = function one(fn) {\n  var called = 0\n    , value;\n\n  /**\n   * The function that prevents double execution.\n   *\n   * @api private\n   */\n  function onetime() {\n    if (called) return value;\n\n    called = 1;\n    value = fn.apply(this, arguments);\n    fn = null;\n\n    return value;\n  }\n\n  //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n  onetime.displayName = fn.displayName || fn.name || onetime.displayName || onetime.name;\n  return onetime;\n};\n\n},{}],7:[function(_dereq_,module,exports){\n'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  //\n  // Little nifty parsing hack, leverage the fact that RegExp.exec increments\n  // the lastIndex property so we can continue executing this loop until we've\n  // parsed all results.\n  //\n  for (;\n    part = parser.exec(query);\n    result[decode(part[1])] = decode(part[2])\n  );\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = [];\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n\n},{}],8:[function(_dereq_,module,exports){\n'use strict';\n\nvar EventEmitter = _dereq_('eventemitter3')\n  , millisecond = _dereq_('millisecond')\n  , destroy = _dereq_('demolish')\n  , Tick = _dereq_('tick-tock')\n  , one = _dereq_('one-time');\n\n/**\n * Returns sane defaults about a given value.\n *\n * @param {String} name Name of property we want.\n * @param {Recovery} selfie Recovery instance that got created.\n * @param {Object} opts User supplied options we want to check.\n * @returns {Number} Some default value.\n * @api private\n */\nfunction defaults(name, selfie, opts) {\n  return millisecond(\n    name in opts ? opts[name] : (name in selfie ? selfie[name] : Recovery[name])\n  );\n}\n\n/**\n * Attempt to recover your connection with reconnection attempt.\n *\n * @constructor\n * @param {Object} options Configuration\n * @api public\n */\nfunction Recovery(options) {\n  var recovery = this;\n\n  if (!(recovery instanceof Recovery)) return new Recovery(options);\n\n  options = options || {};\n\n  recovery.attempt = null;        // Stores the current reconnect attempt.\n  recovery._fn = null;            // Stores the callback.\n\n  recovery['reconnect timeout'] = defaults('reconnect timeout', recovery, options);\n  recovery.retries = defaults('retries', recovery, options);\n  recovery.factor = defaults('factor', recovery, options);\n  recovery.max = defaults('max', recovery, options);\n  recovery.min = defaults('min', recovery, options);\n  recovery.timers = new Tick(recovery);\n}\n\nRecovery.prototype = new EventEmitter();\nRecovery.prototype.constructor = Recovery;\n\nRecovery['reconnect timeout'] = '30 seconds';  // Maximum time to wait for an answer.\nRecovery.max = Infinity;                       // Maximum delay.\nRecovery.min = '500 ms';                       // Minimum delay.\nRecovery.retries = 10;                         // Maximum amount of retries.\nRecovery.factor = 2;                           // Exponential back off factor.\n\n/**\n * Start a new reconnect procedure.\n *\n * @returns {Recovery}\n * @api public\n */\nRecovery.prototype.reconnect = function reconnect() {\n  var recovery = this;\n\n  return recovery.backoff(function backedoff(err, opts) {\n    opts.duration = (+new Date()) - opts.start;\n\n    if (err) return recovery.emit('reconnect failed', err, opts);\n\n    recovery.emit('reconnected', opts);\n  }, recovery.attempt);\n};\n\n/**\n * Exponential back off algorithm for retry operations. It uses a randomized\n * retry so we don't DDOS our server when it goes down under pressure.\n *\n * @param {Function} fn Callback to be called after the timeout.\n * @param {Object} opts Options for configuring the timeout.\n * @returns {Recovery}\n * @api private\n */\nRecovery.prototype.backoff = function backoff(fn, opts) {\n  var recovery = this;\n\n  opts = opts || recovery.attempt || {};\n\n  //\n  // Bailout when we already have a back off process running. We shouldn't call\n  // the callback then.\n  //\n  if (opts.backoff) return recovery;\n\n  opts['reconnect timeout'] = defaults('reconnect timeout', recovery, opts);\n  opts.retries = defaults('retries', recovery, opts);\n  opts.factor = defaults('factor', recovery, opts);\n  opts.max = defaults('max', recovery, opts);\n  opts.min = defaults('min', recovery, opts);\n\n  opts.start = +opts.start || +new Date();\n  opts.duration = +opts.duration || 0;\n  opts.attempt = +opts.attempt || 0;\n\n  //\n  // Bailout if we are about to make too much attempts.\n  //\n  if (opts.attempt === opts.retries) {\n    fn.call(recovery, new Error('Unable to recover'), opts);\n    return recovery;\n  }\n\n  //\n  // Prevent duplicate back off attempts using the same options object and\n  // increment our attempt as we're about to have another go at this thing.\n  //\n  opts.backoff = true;\n  opts.attempt++;\n\n  recovery.attempt = opts;\n\n  //\n  // Calculate the timeout, but make it randomly so we don't retry connections\n  // at the same interval and defeat the purpose. This exponential back off is\n  // based on the work of:\n  //\n  // http://dthain.blogspot.nl/2009/02/exponential-backoff-in-distributed.html\n  //\n  opts.scheduled = opts.attempt !== 1\n    ? Math.min(Math.round(\n        (Math.random() + 1) * opts.min * Math.pow(opts.factor, opts.attempt - 1)\n      ), opts.max)\n    : opts.min;\n\n  recovery.timers.setTimeout('reconnect', function delay() {\n    opts.duration = (+new Date()) - opts.start;\n    opts.backoff = false;\n    recovery.timers.clear('reconnect, timeout');\n\n    //\n    // Create a `one` function which can only be called once. So we can use the\n    // same function for different types of invocations to create a much better\n    // and usable API.\n    //\n    var connect = recovery._fn = one(function connect(err) {\n      recovery.reset();\n\n      if (err) return recovery.backoff(fn, opts);\n\n      fn.call(recovery, undefined, opts);\n    });\n\n    recovery.emit('reconnect', opts, connect);\n    recovery.timers.setTimeout('timeout', function timeout() {\n      var err = new Error('Failed to reconnect in a timely manner');\n      opts.duration = (+new Date()) - opts.start;\n\n      recovery.emit('reconnect timeout', err, opts);\n      connect(err);\n    }, opts['reconnect timeout']);\n  }, opts.scheduled);\n\n  //\n  // Emit a `reconnecting` event with current reconnect options. This allows\n  // them to update the UI and provide their users with feedback.\n  //\n  recovery.emit('reconnect scheduled', opts);\n\n  return recovery;\n};\n\n/**\n * Check if the reconnection process is currently reconnecting.\n *\n * @returns {Boolean}\n * @api public\n */\nRecovery.prototype.reconnecting = function reconnecting() {\n  return !!this.attempt;\n};\n\n/**\n * Tell our reconnection procedure that we're passed.\n *\n * @param {Error} err Reconnection failed.\n * @returns {Recovery}\n * @api public\n */\nRecovery.prototype.reconnected = function reconnected(err) {\n  if (this._fn) this._fn(err);\n  return this;\n};\n\n/**\n * Reset the reconnection attempt so it can be re-used again.\n *\n * @returns {Recovery}\n * @api public\n */\nRecovery.prototype.reset = function reset() {\n  this._fn = this.attempt = null;\n  this.timers.clear('reconnect, timeout');\n\n  return this;\n};\n\n/**\n * Clean up the instance.\n *\n * @type {Function}\n * @returns {Boolean}\n * @api public\n */\nRecovery.prototype.destroy = destroy('timers attempt _fn');\n\n//\n// Expose the module.\n//\nmodule.exports = Recovery;\n\n},{\"demolish\":1,\"eventemitter3\":9,\"millisecond\":5,\"one-time\":6,\"tick-tock\":11}],9:[function(_dereq_,module,exports){\n'use strict';\n\n//\n// We store our EE objects in a plain object whose properties are event names.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// `~` to make sure that the built-in object properties are not overridden or\n// used as an attack vector.\n// We also assume that `Object.create(null)` is available when the event name\n// is an ES6 Symbol.\n//\nvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} once Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Holds the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @param {Boolean} exists We only need to know if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events && this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Mixed} context Only remove listeners matching this context.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return this;\n\n  var listeners = this._events[evt]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn) {\n      if (\n           listeners.fn !== fn\n        || (once && !listeners.once)\n        || (context && listeners.context !== context)\n      ) {\n        events.push(listeners);\n      }\n    } else {\n      for (var i = 0, length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[evt] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[prefix ? prefix + event : event];\n  else this._events = prefix ? {} : Object.create(null);\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n},{}],10:[function(_dereq_,module,exports){\n'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n\n},{}],11:[function(_dereq_,module,exports){\n'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , ms = _dereq_('millisecond');\n\n/**\n * Timer instance.\n *\n * @constructor\n * @param {Object} timer New timer instance.\n * @param {Function} clear Clears the timer instance.\n * @param {Function} duration Duration of the timer.\n * @param {Function} fn The functions that need to be executed.\n * @api private\n */\nfunction Timer(timer, clear, duration, fn) {\n  this.start = +(new Date());\n  this.duration = duration;\n  this.clear = clear;\n  this.timer = timer;\n  this.fns = [fn];\n}\n\n/**\n * Calculate the time left for a given timer.\n *\n * @returns {Number} Time in milliseconds.\n * @api public\n */\nTimer.prototype.remaining = function remaining() {\n  return this.duration - this.taken();\n};\n\n/**\n * Calculate the amount of time it has taken since we've set the timer.\n *\n * @returns {Number}\n * @api public\n */\nTimer.prototype.taken = function taken() {\n  return +(new Date()) - this.start;\n};\n\n/**\n * Custom wrappers for the various of clear{whatever} functions. We cannot\n * invoke them directly as this will cause thrown errors in Google Chrome with\n * an Illegal Invocation Error\n *\n * @see #2\n * @type {Function}\n * @api private\n */\nfunction unsetTimeout(id) { clearTimeout(id); }\nfunction unsetInterval(id) { clearInterval(id); }\nfunction unsetImmediate(id) { clearImmediate(id); }\n\n/**\n * Simple timer management.\n *\n * @constructor\n * @param {Mixed} context Context of the callbacks that we execute.\n * @api public\n */\nfunction Tick(context) {\n  if (!(this instanceof Tick)) return new Tick(context);\n\n  this.timers = {};\n  this.context = context || this;\n}\n\n/**\n * Return a function which will just iterate over all assigned callbacks and\n * optionally clear the timers from memory if needed.\n *\n * @param {String} name Name of the timer we need to execute.\n * @param {Boolean} clear Also clear from memory.\n * @returns {Function}\n * @api private\n */\nTick.prototype.tock = function ticktock(name, clear) {\n  var tock = this;\n\n  return function tickedtock() {\n    if (!(name in tock.timers)) return;\n\n    var timer = tock.timers[name]\n      , fns = timer.fns.slice()\n      , l = fns.length\n      , i = 0;\n\n    if (clear) tock.clear(name);\n    else tock.start = +new Date();\n\n    for (; i < l; i++) {\n      fns[i].call(tock.context);\n    }\n  };\n};\n\n/**\n * Add a new timeout.\n *\n * @param {String} name Name of the timer.\n * @param {Function} fn Completion callback.\n * @param {Mixed} time Duration of the timer.\n * @returns {Tick}\n * @api public\n */\nTick.prototype.setTimeout = function timeout(name, fn, time) {\n  var tick = this\n    , tock;\n\n  if (tick.timers[name]) {\n    tick.timers[name].fns.push(fn);\n    return tick;\n  }\n\n  tock = ms(time);\n  tick.timers[name] = new Timer(\n    setTimeout(tick.tock(name, true), ms(time)),\n    unsetTimeout,\n    tock,\n    fn\n  );\n\n  return tick;\n};\n\n/**\n * Add a new interval.\n *\n * @param {String} name Name of the timer.\n * @param {Function} fn Completion callback.\n * @param {Mixed} time Interval of the timer.\n * @returns {Tick}\n * @api public\n */\nTick.prototype.setInterval = function interval(name, fn, time) {\n  var tick = this\n    , tock;\n\n  if (tick.timers[name]) {\n    tick.timers[name].fns.push(fn);\n    return tick;\n  }\n\n  tock = ms(time);\n  tick.timers[name] = new Timer(\n    setInterval(tick.tock(name), ms(time)),\n    unsetInterval,\n    tock,\n    fn\n  );\n\n  return tick;\n};\n\n/**\n * Add a new setImmediate.\n *\n * @param {String} name Name of the timer.\n * @param {Function} fn Completion callback.\n * @returns {Tick}\n * @api public\n */\nTick.prototype.setImmediate = function immediate(name, fn) {\n  var tick = this;\n\n  if ('function' !== typeof setImmediate) return tick.setTimeout(name, fn, 0);\n\n  if (tick.timers[name]) {\n    tick.timers[name].fns.push(fn);\n    return tick;\n  }\n\n  tick.timers[name] = new Timer(\n    setImmediate(tick.tock(name, true)),\n    unsetImmediate,\n    0,\n    fn\n  );\n\n  return tick;\n};\n\n/**\n * Check if we have a timer set.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api public\n */\nTick.prototype.active = function active(name) {\n  return name in this.timers;\n};\n\n/**\n * Properly clean up all timeout references. If no arguments are supplied we\n * will attempt to clear every single timer that is present.\n *\n * @param {Arguments} ..args.. The names of the timeouts we need to clear\n * @returns {Tick}\n * @api public\n */\nTick.prototype.clear = function clear() {\n  var args = arguments.length ? arguments : []\n    , tick = this\n    , timer, i, l;\n\n  if (args.length === 1 && 'string' === typeof args[0]) {\n    args = args[0].split(/[, ]+/);\n  }\n\n  if (!args.length) {\n    for (timer in tick.timers) {\n      if (has.call(tick.timers, timer)) args.push(timer);\n    }\n  }\n\n  for (i = 0, l = args.length; i < l; i++) {\n    timer = tick.timers[args[i]];\n\n    if (!timer) continue;\n    timer.clear(timer.timer);\n\n    timer.fns = timer.timer = timer.clear = null;\n    delete tick.timers[args[i]];\n  }\n\n  return tick;\n};\n\n/**\n * Adjust a timeout or interval to a new duration.\n *\n * @returns {Tick}\n * @api public\n */\nTick.prototype.adjust = function adjust(name, time) {\n  var interval\n    , tick = this\n    , tock = ms(time)\n    , timer = tick.timers[name];\n\n  if (!timer) return tick;\n\n  interval = timer.clear === unsetInterval;\n  timer.clear(timer.timer);\n  timer.start = +(new Date());\n  timer.duration = tock;\n  timer.timer = (interval ? setInterval : setTimeout)(tick.tock(name, !interval), tock);\n\n  return tick;\n};\n\n/**\n * We will no longer use this module, prepare your self for global cleanups.\n *\n * @returns {Boolean}\n * @api public\n */\nTick.prototype.end = Tick.prototype.destroy = function end() {\n  if (!this.context) return false;\n\n  this.clear();\n  this.context = this.timers = null;\n\n  return true;\n};\n\n//\n// Expose the timer factory.\n//\nTick.Timer = Timer;\nmodule.exports = Tick;\n\n},{\"millisecond\":5}],12:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar required = _dereq_('requires-port')\n  , qs = _dereq_('querystringify')\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nfunction lolcation(loc) {\n  loc = loc || global.location || {};\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @api private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @api private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} location Location defaults for relative paths.\n * @param {Boolean|Function} parser Parser for the query string.\n * @api public\n */\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL}\n * @api public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;\n\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String}\n * @api public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nURL.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nURL.extractProtocol = extractProtocol;\nURL.location = lolcation;\nURL.qs = qs;\n\nmodule.exports = URL;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"querystringify\":7,\"requires-port\":10}],13:[function(_dereq_,module,exports){\n'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n\n},{}],14:[function(_dereq_,module,exports){\n/*globals require, define */\n'use strict';\n\nvar EventEmitter = _dereq_('eventemitter3')\n  , TickTock = _dereq_('tick-tock')\n  , Recovery = _dereq_('recovery')\n  , qs = _dereq_('querystringify')\n  , inherits = _dereq_('inherits')\n  , destroy = _dereq_('demolish')\n  , yeast = _dereq_('yeast')\n  , u2028 = /\\u2028/g\n  , u2029 = /\\u2029/g;\n\n/**\n * Context assertion, ensure that some of our public Primus methods are called\n * with the correct context to ensure that\n *\n * @param {Primus} self The context of the function.\n * @param {String} method The method name.\n * @api private\n */\nfunction context(self, method) {\n  if (self instanceof Primus) return;\n\n  var failure = new Error('Primus#'+ method + '\\'s context should called with a Primus instance');\n\n  if ('function' !== typeof self.listeners || !self.listeners('error').length) {\n    throw failure;\n  }\n\n  self.emit('error', failure);\n}\n\n//\n// Sets the default connection URL, it uses the default origin of the browser\n// when supported but degrades for older browsers. In Node.js, we cannot guess\n// where the user wants to connect to, so we just default to localhost.\n//\nvar defaultUrl;\n\ntry {\n  if (location.origin) {\n    defaultUrl = location.origin;\n  } else {\n    defaultUrl = location.protocol +'//'+ location.host;\n  }\n} catch (e) {\n  defaultUrl = 'http://127.0.0.1';\n}\n\n/**\n * Primus is a real-time library agnostic framework for establishing real-time\n * connections with servers.\n *\n * Options:\n * - reconnect, configuration for the reconnect process.\n * - manual, don't automatically call `.open` to start the connection.\n * - websockets, force the use of WebSockets, even when you should avoid them.\n * - timeout, connect timeout, server didn't respond in a timely manner.\n * - pingTimeout, The maximum amount of time to wait for the server to send a ping.\n * - network, Use network events as leading method for network connection drops.\n * - strategy, Reconnection strategies.\n * - transport, Transport options.\n * - url, uri, The URL to use connect with the server.\n *\n * @constructor\n * @param {String} url The URL of your server.\n * @param {Object} options The configuration.\n * @api public\n */\nfunction Primus(url, options) {\n  if (!(this instanceof Primus)) return new Primus(url, options);\n\n  Primus.Stream.call(this);\n\n  if ('function' !== typeof this.client) {\n    return this.critical(new Error(\n      'The client library has not been compiled correctly, see '+\n      'https://github.com/primus/primus#client-library for more details'\n    ));\n  }\n\n  if ('object' === typeof url) {\n    options = url;\n    url = options.url || options.uri || defaultUrl;\n  } else {\n    options = options || {};\n  }\n\n  if ('ping' in options || 'pong' in options) {\n    return this.critical(new Error(\n      'The `ping` and `pong` options have been removed'\n    ));\n  }\n\n  var primus = this;\n\n  // The maximum number of messages that can be placed in queue.\n  options.queueSize = 'queueSize' in options ? options.queueSize : Infinity;\n\n  // Connection timeout duration.\n  options.timeout = 'timeout' in options ? options.timeout : 10e3;\n\n  // Stores the back off configuration.\n  options.reconnect = 'reconnect' in options ? options.reconnect : {};\n\n  // Heartbeat ping interval.\n  options.pingTimeout = 'pingTimeout' in options ? options.pingTimeout : 45000;\n\n  // Reconnect strategies.\n  options.strategy = 'strategy' in options ? options.strategy : [];\n\n  // Custom transport options.\n  options.transport = 'transport' in options ? options.transport : {};\n\n  primus.buffer = [];                           // Stores premature send data.\n  primus.writable = true;                       // Silly stream compatibility.\n  primus.readable = true;                       // Silly stream compatibility.\n  primus.url = primus.parse(url || defaultUrl); // Parse the URL to a readable format.\n  primus.readyState = Primus.CLOSED;            // The readyState of the connection.\n  primus.options = options;                     // Reference to the supplied options.\n  primus.timers = new TickTock(this);           // Contains all our timers.\n  primus.socket = null;                         // Reference to the internal connection.\n  primus.disconnect = false;                    // Did we receive a disconnect packet?\n  primus.transport = options.transport;         // Transport options.\n  primus.transformers = {                       // Message transformers.\n    outgoing: [],\n    incoming: []\n  };\n\n  //\n  // Create our reconnection instance.\n  //\n  primus.recovery = new Recovery(options.reconnect);\n\n  //\n  // Parse the reconnection strategy. It can have the following strategies:\n  //\n  // - timeout: Reconnect when we have a network timeout.\n  // - disconnect: Reconnect when we have an unexpected disconnect.\n  // - online: Reconnect when we're back online.\n  //\n  if ('string' === typeof options.strategy) {\n    options.strategy = options.strategy.split(/\\s?,\\s?/g);\n  }\n\n  if (false === options.strategy) {\n    //\n    // Strategies are disabled, but we still need an empty array to join it in\n    // to nothing.\n    //\n    options.strategy = [];\n  } else if (!options.strategy.length) {\n    options.strategy.push('disconnect', 'online');\n\n    //\n    // Timeout based reconnection should only be enabled conditionally. When\n    // authorization is enabled it could trigger.\n    //\n    if (!this.authorization) options.strategy.push('timeout');\n  }\n\n  options.strategy = options.strategy.join(',').toLowerCase();\n\n  //\n  // Force the use of WebSockets, even when we've detected some potential\n  // broken WebSocket implementation.\n  //\n  if ('websockets' in options) {\n    primus.AVOID_WEBSOCKETS = !options.websockets;\n  }\n\n  //\n  // Force or disable the use of NETWORK events as leading client side\n  // disconnection detection.\n  //\n  if ('network' in options) {\n    primus.NETWORK_EVENTS = options.network;\n  }\n\n  //\n  // Check if the user wants to manually initialise a connection. If they don't,\n  // we want to do it after a really small timeout so we give the users enough\n  // time to listen for `error` events etc.\n  //\n  if (!options.manual) primus.timers.setTimeout('open', function open() {\n    primus.timers.clear('open');\n    primus.open();\n  }, 0);\n\n  primus.initialise(options);\n}\n\n/**\n * Simple require wrapper to make browserify, node and require.js play nice.\n *\n * @param {String} name The module to require.\n * @returns {Object|Undefined} The module that we required.\n * @api private\n */\nPrimus.requires = Primus.require = function requires(name) {\n  if ('function' !== typeof _dereq_) return undefined;\n\n  return !('function' === typeof define && define.amd)\n    ? _dereq_(name)\n    : undefined;\n};\n\n//\n// It's possible that we're running in Node.js or in a Node.js compatible\n// environment. In this cases we try to inherit from the Stream base class.\n//\ntry {\n  Primus.Stream = Primus.requires('stream');\n} catch (e) { }\n\nif (!Primus.Stream) Primus.Stream = EventEmitter;\n\ninherits(Primus, Primus.Stream);\n\n/**\n * Primus readyStates, used internally to set the correct ready state.\n *\n * @type {Number}\n * @private\n */\nPrimus.OPENING = 1;   // We're opening the connection.\nPrimus.CLOSED  = 2;   // No active connection.\nPrimus.OPEN    = 3;   // The connection is open.\n\n/**\n * Are we working with a potentially broken WebSockets implementation? This\n * boolean can be used by transformers to remove `WebSockets` from their\n * supported transports.\n *\n * @type {Boolean}\n * @private\n */\nPrimus.prototype.AVOID_WEBSOCKETS = false;\n\n/**\n * Some browsers support registering emitting `online` and `offline` events when\n * the connection has been dropped on the client. We're going to detect it in\n * a simple `try {} catch (e) {}` statement so we don't have to do complicated\n * feature detection.\n *\n * @type {Boolean}\n * @private\n */\nPrimus.prototype.NETWORK_EVENTS = false;\nPrimus.prototype.online = true;\n\ntry {\n  if (\n       Primus.prototype.NETWORK_EVENTS = 'onLine' in navigator\n    && (window.addEventListener || document.body.attachEvent)\n  ) {\n    if (!navigator.onLine) {\n      Primus.prototype.online = false;\n    }\n  }\n} catch (e) { }\n\n/**\n * The Ark contains all our plugins definitions. It's namespaced by\n * name => plugin.\n *\n * @type {Object}\n * @private\n */\nPrimus.prototype.ark = {};\n\n/**\n * Simple emit wrapper that returns a function that emits an event once it's\n * called. This makes it easier for transports to emit specific events.\n *\n * @returns {Function} A function that will emit the event when called.\n * @api public\n */\nPrimus.prototype.emits = _dereq_('emits');\n\n/**\n * Return the given plugin.\n *\n * @param {String} name The name of the plugin.\n * @returns {Object|undefined} The plugin or undefined.\n * @api public\n */\nPrimus.prototype.plugin = function plugin(name) {\n  context(this, 'plugin');\n\n  if (name) return this.ark[name];\n\n  var plugins = {};\n\n  for (name in this.ark) {\n    plugins[name] = this.ark[name];\n  }\n\n  return plugins;\n};\n\n/**\n * Checks if the given event is an emitted event by Primus.\n *\n * @param {String} evt The event name.\n * @returns {Boolean} Indication of the event is reserved for internal use.\n * @api public\n */\nPrimus.prototype.reserved = function reserved(evt) {\n  return (/^(incoming|outgoing)::/).test(evt)\n  || evt in this.reserved.events;\n};\n\n/**\n * The actual events that are used by the client.\n *\n * @type {Object}\n * @public\n */\nPrimus.prototype.reserved.events = {\n  'reconnect scheduled': 1,\n  'reconnect timeout': 1,\n  'readyStateChange': 1,\n  'reconnect failed': 1,\n  'reconnected': 1,\n  'reconnect': 1,\n  'offline': 1,\n  'timeout': 1,\n  'destroy': 1,\n  'online': 1,\n  'error': 1,\n  'close': 1,\n  'open': 1,\n  'data': 1,\n  'end': 1\n};\n\n/**\n * Initialise the Primus and setup all parsers and internal listeners.\n *\n * @param {Object} options The original options object.\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.initialise = function initialise(options) {\n  var primus = this;\n\n  primus.recovery\n  .on('reconnected', primus.emits('reconnected'))\n  .on('reconnect failed', primus.emits('reconnect failed', function failed(next) {\n    primus.emit('end');\n    next();\n  }))\n  .on('reconnect timeout', primus.emits('reconnect timeout'))\n  .on('reconnect scheduled', primus.emits('reconnect scheduled'))\n  .on('reconnect', primus.emits('reconnect', function reconnect(next) {\n    primus.emit('outgoing::reconnect');\n    next();\n  }));\n\n  primus.on('outgoing::open', function opening() {\n    var readyState = primus.readyState;\n\n    primus.readyState = Primus.OPENING;\n    if (readyState !== primus.readyState) {\n      primus.emit('readyStateChange', 'opening');\n    }\n  });\n\n  primus.on('incoming::open', function opened() {\n    var readyState = primus.readyState;\n\n    if (primus.recovery.reconnecting()) {\n      primus.recovery.reconnected();\n    }\n\n    //\n    // The connection has been opened so we should set our state to\n    // (writ|read)able so our stream compatibility works as intended.\n    //\n    primus.writable = true;\n    primus.readable = true;\n\n    //\n    // Make sure we are flagged as `online` as we've successfully opened the\n    // connection.\n    //\n    if (!primus.online) {\n      primus.online = true;\n      primus.emit('online');\n    }\n\n    primus.readyState = Primus.OPEN;\n    if (readyState !== primus.readyState) {\n      primus.emit('readyStateChange', 'open');\n    }\n\n    primus.heartbeat();\n\n    if (primus.buffer.length) {\n      var data = primus.buffer.slice()\n        , length = data.length\n        , i = 0;\n\n      primus.buffer.length = 0;\n\n      for (; i < length; i++) {\n        primus._write(data[i]);\n      }\n    }\n\n    primus.emit('open');\n  });\n\n  primus.on('incoming::ping', function ping(time) {\n    primus.online = true;\n    primus.heartbeat();\n    primus.emit('outgoing::pong', time);\n    primus._write('primus::pong::'+ time);\n  });\n\n  primus.on('incoming::error', function error(e) {\n    var connect = primus.timers.active('connect')\n      , err = e;\n\n    //\n    // When the error is not an Error instance we try to normalize it.\n    //\n    if ('string' === typeof e) {\n      err = new Error(e);\n    } else if (!(e instanceof Error) && 'object' === typeof e) {\n      //\n      // BrowserChannel and SockJS returns an object which contains some\n      // details of the error. In order to have a proper error we \"copy\" the\n      // details in an Error instance.\n      //\n      err = new Error(e.message || e.reason);\n      for (var key in e) {\n        if (Object.prototype.hasOwnProperty.call(e, key))\n          err[key] = e[key];\n      }\n    }\n    //\n    // We're still doing a reconnect attempt, it could be that we failed to\n    // connect because the server was down. Failing connect attempts should\n    // always emit an `error` event instead of a `open` event.\n    //\n    //\n    if (primus.recovery.reconnecting()) return primus.recovery.reconnected(err);\n    if (primus.listeners('error').length) primus.emit('error', err);\n\n    //\n    // We received an error while connecting, this most likely the result of an\n    // unauthorized access to the server.\n    //\n    if (connect) {\n      if (~primus.options.strategy.indexOf('timeout')) {\n        primus.recovery.reconnect();\n      } else {\n        primus.end();\n      }\n    }\n  });\n\n  primus.on('incoming::data', function message(raw) {\n    primus.decoder(raw, function decoding(err, data) {\n      //\n      // Do a \"safe\" emit('error') when we fail to parse a message. We don't\n      // want to throw here as listening to errors should be optional.\n      //\n      if (err) return primus.listeners('error').length && primus.emit('error', err);\n\n      //\n      // Handle all \"primus::\" prefixed protocol messages.\n      //\n      if (primus.protocol(data)) return;\n      primus.transforms(primus, primus, 'incoming', data, raw);\n    });\n  });\n\n  primus.on('incoming::end', function end() {\n    var readyState = primus.readyState;\n\n    //\n    // This `end` started with the receiving of a primus::server::close packet\n    // which indicated that the user/developer on the server closed the\n    // connection and it was not a result of a network disruption. So we should\n    // kill the connection without doing a reconnect.\n    //\n    if (primus.disconnect) {\n      primus.disconnect = false;\n\n      return primus.end();\n    }\n\n    //\n    // Always set the readyState to closed, and if we're still connecting, close\n    // the connection so we're sure that everything after this if statement block\n    // is only executed because our readyState is set to `open`.\n    //\n    primus.readyState = Primus.CLOSED;\n    if (readyState !== primus.readyState) {\n      primus.emit('readyStateChange', 'end');\n    }\n\n    if (primus.timers.active('connect')) primus.end();\n    if (readyState !== Primus.OPEN) {\n      return primus.recovery.reconnecting()\n        ? primus.recovery.reconnect()\n        : false;\n    }\n\n    this.writable = false;\n    this.readable = false;\n\n    //\n    // Clear all timers in case we're not going to reconnect.\n    //\n    this.timers.clear();\n\n    //\n    // Fire the `close` event as an indication of connection disruption.\n    // This is also fired by `primus#end` so it is emitted in all cases.\n    //\n    primus.emit('close');\n\n    //\n    // The disconnect was unintentional, probably because the server has\n    // shutdown, so if the reconnection is enabled start a reconnect procedure.\n    //\n    if (~primus.options.strategy.indexOf('disconnect')) {\n      return primus.recovery.reconnect();\n    }\n\n    primus.emit('outgoing::end');\n    primus.emit('end');\n  });\n\n  //\n  // Setup the real-time client.\n  //\n  primus.client();\n\n  //\n  // Process the potential plugins.\n  //\n  for (var plugin in primus.ark) {\n    primus.ark[plugin].call(primus, primus, options);\n  }\n\n  //\n  // NOTE: The following code is only required if we're supporting network\n  // events as it requires access to browser globals.\n  //\n  if (!primus.NETWORK_EVENTS) return primus;\n\n  /**\n   * Handler for offline notifications.\n   *\n   * @api private\n   */\n  primus.offlineHandler = function offline() {\n    if (!primus.online) return; // Already or still offline, bailout.\n\n    primus.online = false;\n    primus.emit('offline');\n    primus.end();\n\n    //\n    // It is certainly possible that we're in a reconnection loop and that the\n    // user goes offline. In this case we want to kill the existing attempt so\n    // when the user goes online, it will attempt to reconnect freshly again.\n    //\n    primus.recovery.reset();\n  };\n\n  /**\n   * Handler for online notifications.\n   *\n   * @api private\n   */\n  primus.onlineHandler = function online() {\n    if (primus.online) return; // Already or still online, bailout.\n\n    primus.online = true;\n    primus.emit('online');\n\n    if (~primus.options.strategy.indexOf('online')) {\n      primus.recovery.reconnect();\n    }\n  };\n\n  if (window.addEventListener) {\n    window.addEventListener('offline', primus.offlineHandler, false);\n    window.addEventListener('online', primus.onlineHandler, false);\n  } else if (document.body.attachEvent){\n    document.body.attachEvent('onoffline', primus.offlineHandler);\n    document.body.attachEvent('ononline', primus.onlineHandler);\n  }\n\n  return primus;\n};\n\n/**\n * Really dead simple protocol parser. We simply assume that every message that\n * is prefixed with `primus::` could be used as some sort of protocol definition\n * for Primus.\n *\n * @param {String} msg The data.\n * @returns {Boolean} Is a protocol message.\n * @api private\n */\nPrimus.prototype.protocol = function protocol(msg) {\n  if (\n       'string' !== typeof msg\n    || msg.indexOf('primus::') !== 0\n  ) return false;\n\n  var last = msg.indexOf(':', 8)\n    , value = msg.slice(last + 2);\n\n  switch (msg.slice(8,  last)) {\n    case 'ping':\n      this.emit('incoming::ping', +value);\n      break;\n\n    case 'server':\n      //\n      // The server is closing the connection, forcefully disconnect so we don't\n      // reconnect again.\n      //\n      if ('close' === value) {\n        this.disconnect = true;\n      }\n      break;\n\n    case 'id':\n      this.emit('incoming::id', value);\n      break;\n\n    //\n    // Unknown protocol, somebody is probably sending `primus::` prefixed\n    // messages.\n    //\n    default:\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Execute the set of message transformers from Primus on the incoming or\n * outgoing message.\n * This function and it's content should be in sync with Spark#transforms in\n * spark.js.\n *\n * @param {Primus} primus Reference to the Primus instance with message transformers.\n * @param {Spark|Primus} connection Connection that receives or sends data.\n * @param {String} type The type of message, 'incoming' or 'outgoing'.\n * @param {Mixed} data The data to send or that has been received.\n * @param {String} raw The raw encoded data.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.transforms = function transforms(primus, connection, type, data, raw) {\n  var packet = { data: data }\n    , fns = primus.transformers[type];\n\n  //\n  // Iterate in series over the message transformers so we can allow optional\n  // asynchronous execution of message transformers which could for example\n  // retrieve additional data from the server, do extra decoding or even\n  // message validation.\n  //\n  (function transform(index, done) {\n    var transformer = fns[index++];\n\n    if (!transformer) return done();\n\n    if (1 === transformer.length) {\n      if (false === transformer.call(connection, packet)) {\n        //\n        // When false is returned by an incoming transformer it means that's\n        // being handled by the transformer and we should not emit the `data`\n        // event.\n        //\n        return;\n      }\n\n      return transform(index, done);\n    }\n\n    transformer.call(connection, packet, function finished(err, arg) {\n      if (err) return connection.emit('error', err);\n      if (false === arg) return;\n\n      transform(index, done);\n    });\n  }(0, function done() {\n    //\n    // We always emit 2 arguments for the data event, the first argument is the\n    // parsed data and the second argument is the raw string that we received.\n    // This allows you, for example, to do some validation on the parsed data\n    // and then save the raw string in your database without the stringify\n    // overhead.\n    //\n    if ('incoming' === type) return connection.emit('data', packet.data, raw);\n\n    connection._write(packet.data);\n  }));\n\n  return this;\n};\n\n/**\n * Retrieve the current id from the server.\n *\n * @param {Function} fn Callback function.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.id = function id(fn) {\n  if (this.socket && this.socket.id) return fn(this.socket.id);\n\n  this._write('primus::id::');\n  return this.once('incoming::id', fn);\n};\n\n/**\n * Establish a connection with the server. When this function is called we\n * assume that we don't have any open connections. If you do call it when you\n * have a connection open, it could cause duplicate connections.\n *\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.open = function open() {\n  context(this, 'open');\n\n  //\n  // Only start a `connection timeout` procedure if we're not reconnecting as\n  // that shouldn't count as an initial connection. This should be started\n  // before the connection is opened to capture failing connections and kill the\n  // timeout.\n  //\n  if (!this.recovery.reconnecting() && this.options.timeout) this.timeout();\n\n  this.emit('outgoing::open');\n  return this;\n};\n\n/**\n * Send a new message.\n *\n * @param {Mixed} data The data that needs to be written.\n * @returns {Boolean} Always returns true as we don't support back pressure.\n * @api public\n */\nPrimus.prototype.write = function write(data) {\n  context(this, 'write');\n  this.transforms(this, this, 'outgoing', data);\n\n  return true;\n};\n\n/**\n * The actual message writer.\n *\n * @param {Mixed} data The message that needs to be written.\n * @returns {Boolean} Successful write to the underlaying transport.\n * @api private\n */\nPrimus.prototype._write = function write(data) {\n  var primus = this;\n\n  //\n  // The connection is closed, normally this would already be done in the\n  // `spark.write` method, but as `_write` is used internally, we should also\n  // add the same check here to prevent potential crashes by writing to a dead\n  // socket.\n  //\n  if (Primus.OPEN !== primus.readyState) {\n    //\n    // If the buffer is at capacity, remove the first item.\n    //\n    if (this.buffer.length === this.options.queueSize) {\n      this.buffer.splice(0, 1);\n    }\n\n    this.buffer.push(data);\n    return false;\n  }\n\n  primus.encoder(data, function encoded(err, packet) {\n    //\n    // Do a \"safe\" emit('error') when we fail to parse a message. We don't\n    // want to throw here as listening to errors should be optional.\n    //\n    if (err) return primus.listeners('error').length && primus.emit('error', err);\n\n    //\n    // Hack 1: \\u2028 and \\u2029 are allowed inside a JSON string, but JavaScript\n    // defines them as newline separators. Unescaped control characters are not\n    // allowed inside JSON strings, so this causes an error at parse time. We\n    // work around this issue by escaping these characters. This can cause\n    // errors with JSONP requests or if the string is just evaluated.\n    //\n    if ('string' === typeof packet) {\n      if (~packet.indexOf('\\u2028')) packet = packet.replace(u2028, '\\\\u2028');\n      if (~packet.indexOf('\\u2029')) packet = packet.replace(u2029, '\\\\u2029');\n    }\n\n    primus.emit('outgoing::data', packet);\n  });\n\n  return true;\n};\n\n/**\n * Set a timer that, upon expiration, closes the client.\n *\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.heartbeat = function heartbeat() {\n  if (!this.options.pingTimeout) return this;\n\n  this.timers.clear('heartbeat');\n  this.timers.setTimeout('heartbeat', function expired() {\n    //\n    // The network events already captured the offline event.\n    //\n    if (!this.online) return;\n\n    this.online = false;\n    this.emit('offline');\n    this.emit('incoming::end');\n  }, this.options.pingTimeout);\n\n  return this;\n};\n\n/**\n * Start a connection timeout.\n *\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.timeout = function timeout() {\n  var primus = this;\n\n  /**\n   * Remove all references to the timeout listener as we've received an event\n   * that can be used to determine state.\n   *\n   * @api private\n   */\n  function remove() {\n    primus.removeListener('error', remove)\n          .removeListener('open', remove)\n          .removeListener('end', remove)\n          .timers.clear('connect');\n  }\n\n  primus.timers.setTimeout('connect', function expired() {\n    remove(); // Clean up old references.\n\n    if (primus.readyState === Primus.OPEN || primus.recovery.reconnecting()) {\n      return;\n    }\n\n    primus.emit('timeout');\n\n    //\n    // We failed to connect to the server.\n    //\n    if (~primus.options.strategy.indexOf('timeout')) {\n      primus.recovery.reconnect();\n    } else {\n      primus.end();\n    }\n  }, primus.options.timeout);\n\n  return primus.on('error', remove)\n    .on('open', remove)\n    .on('end', remove);\n};\n\n/**\n * Close the connection completely.\n *\n * @param {Mixed} data last packet of data.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.end = function end(data) {\n  context(this, 'end');\n\n  if (\n      this.readyState === Primus.CLOSED\n    && !this.timers.active('connect')\n    && !this.timers.active('open')\n  ) {\n    //\n    // If we are reconnecting stop the reconnection procedure.\n    //\n    if (this.recovery.reconnecting()) {\n      this.recovery.reset();\n      this.emit('end');\n    }\n\n    return this;\n  }\n\n  if (data !== undefined) this.write(data);\n\n  this.writable = false;\n  this.readable = false;\n\n  var readyState = this.readyState;\n  this.readyState = Primus.CLOSED;\n\n  if (readyState !== this.readyState) {\n    this.emit('readyStateChange', 'end');\n  }\n\n  this.timers.clear();\n  this.emit('outgoing::end');\n  this.emit('close');\n  this.emit('end');\n\n  return this;\n};\n\n/**\n * Completely demolish the Primus instance and forcefully nuke all references.\n *\n * @returns {Boolean}\n * @api public\n */\nPrimus.prototype.destroy = destroy('url timers options recovery socket transport transformers', {\n  before: 'end',\n  after: ['removeAllListeners', function detach() {\n    if (!this.NETWORK_EVENTS) return;\n\n    if (window.addEventListener) {\n      window.removeEventListener('offline', this.offlineHandler);\n      window.removeEventListener('online', this.onlineHandler);\n    } else if (document.body.attachEvent){\n      document.body.detachEvent('onoffline', this.offlineHandler);\n      document.body.detachEvent('ononline', this.onlineHandler);\n    }\n  }]\n});\n\n/**\n * Create a shallow clone of a given object.\n *\n * @param {Object} obj The object that needs to be cloned.\n * @returns {Object} Copy.\n * @api private\n */\nPrimus.prototype.clone = function clone(obj) {\n  return this.merge({}, obj);\n};\n\n/**\n * Merge different objects in to one target object.\n *\n * @param {Object} target The object where everything should be merged in.\n * @returns {Object} Original target with all merged objects.\n * @api private\n */\nPrimus.prototype.merge = function merge(target) {\n  for (var i = 1, key, obj; i < arguments.length; i++) {\n    obj = arguments[i];\n\n    for (key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key))\n        target[key] = obj[key];\n    }\n  }\n\n  return target;\n};\n\n/**\n * Parse the connection string.\n *\n * @type {Function}\n * @param {String} url Connection URL.\n * @returns {Object} Parsed connection.\n * @api private\n */\nPrimus.prototype.parse = _dereq_('url-parse');\n\n/**\n * Parse a query string.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object} Parsed query string.\n * @api private\n */\nPrimus.prototype.querystring = qs.parse;\n/**\n * Transform a query string object back into string equiv.\n *\n * @param {Object} obj The query string object.\n * @returns {String}\n * @api private\n */\nPrimus.prototype.querystringify = qs.stringify;\n\n/**\n * Generates a connection URI.\n *\n * @param {String} protocol The protocol that should used to crate the URI.\n * @returns {String|options} The URL.\n * @api private\n */\nPrimus.prototype.uri = function uri(options) {\n  var url = this.url\n    , server = []\n    , qsa = false;\n\n  //\n  // Query strings are only allowed when we've received clearance for it.\n  //\n  if (options.query) qsa = true;\n\n  options = options || {};\n  options.protocol = 'protocol' in options\n    ? options.protocol\n    : 'http:';\n  options.query = url.query && qsa\n    ? url.query.slice(1)\n    : false;\n  options.secure = 'secure' in options\n    ? options.secure\n    : url.protocol === 'https:' || url.protocol === 'wss:';\n  options.auth = 'auth' in options\n    ? options.auth\n    : url.auth;\n  options.pathname = 'pathname' in options\n    ? options.pathname\n    : this.pathname;\n  options.port = 'port' in options\n    ? +options.port\n    : +url.port || (options.secure ? 443 : 80);\n\n  //\n  // We need to make sure that we create a unique connection URL every time to\n  // prevent back forward cache from becoming an issue. We're doing this by\n  // forcing an cache busting query string in to the URL.\n  //\n  var querystring = this.querystring(options.query || '');\n  querystring._primuscb = yeast();\n  options.query = this.querystringify(querystring);\n\n  //\n  // Allow transformation of the options before we construct a full URL from it.\n  //\n  this.emit('outgoing::url', options);\n\n  //\n  // Automatically suffix the protocol so we can supply `ws:` and `http:` and\n  // it gets transformed correctly.\n  //\n  server.push(options.secure ? options.protocol.replace(':', 's:') : options.protocol, '');\n\n  server.push(options.auth ? options.auth +'@'+ url.host : url.host);\n\n  //\n  // Pathnames are optional as some Transformers would just use the pathname\n  // directly.\n  //\n  if (options.pathname) server.push(options.pathname.slice(1));\n\n  //\n  // Optionally add a search query.\n  //\n  if (qsa) server[server.length - 1] += '?'+ options.query;\n  else delete options.query;\n\n  if (options.object) return options;\n  return server.join('/');\n};\n\n/**\n * Register a new message transformer. This allows you to easily manipulate incoming\n * and outgoing data which is particularity handy for plugins that want to send\n * meta data together with the messages.\n *\n * @param {String} type Incoming or outgoing\n * @param {Function} fn A new message transformer.\n * @returns {Primus}\n * @api public\n */\nPrimus.prototype.transform = function transform(type, fn) {\n  context(this, 'transform');\n\n  if (!(type in this.transformers)) {\n    return this.critical(new Error('Invalid transformer type'));\n  }\n\n  this.transformers[type].push(fn);\n  return this;\n};\n\n/**\n * A critical error has occurred, if we have an `error` listener, emit it there.\n * If not, throw it, so we get a stack trace + proper error message.\n *\n * @param {Error} err The critical error.\n * @returns {Primus}\n * @api private\n */\nPrimus.prototype.critical = function critical(err) {\n  if (this.emit('error', err)) return this;\n\n  throw err;\n};\n\n/**\n * Syntax sugar, adopt a Socket.IO like API.\n *\n * @param {String} url The URL we want to connect to.\n * @param {Object} options Connection options.\n * @returns {Primus}\n * @api public\n */\nPrimus.connect = function connect(url, options) {\n  return new Primus(url, options);\n};\n\n//\n// Expose the EventEmitter so it can be re-used by wrapping libraries we're also\n// exposing the Stream interface.\n//\nPrimus.EventEmitter = EventEmitter;\n\n//\n// These libraries are automatically inserted at the server-side using the\n// Primus#library method.\n//\nPrimus.prototype.client = function client() {\n  var onmessage = this.emits('incoming::data')\n    , onerror = this.emits('incoming::error')\n    , onopen = this.emits('incoming::open')\n    , onclose = this.emits('incoming::end')\n    , primus = this\n    , socket;\n\n  //\n  // Select an available Engine.IO factory.\n  //\n  var factory = (function factory() {\n    if ('undefined' !== typeof eio) return eio;\n\n    try { return Primus.requires('engine.io-client'); }\n    catch (e) {}\n\n    return undefined;\n  })();\n\n  if (!factory) return primus.critical(new Error(\n    'Missing required `engine.io-client` module. ' +\n    'Please run `npm install --save engine.io-client`'\n  ));\n\n  //\n  // Connect to the given URL.\n  //\n  primus.on('outgoing::open', function opening() {\n    primus.emit('outgoing::end');\n\n    primus.socket = socket = factory(primus.merge(primus.transport,\n      primus.url,\n      primus.uri({ protocol: 'http:', query: true, object: true }), {\n      //\n      // Never remember upgrades as switching from a WIFI to a 3G connection\n      // could still get your connection blocked as 3G connections are usually\n      // behind a reverse proxy so ISP's can optimize mobile traffic by\n      // caching requests.\n      //\n      rememberUpgrade: false,\n\n      //\n      // Binary support in Engine.IO breaks a shit things. Turn it off for now.\n      //\n      forceBase64: true,\n\n      //\n      // XDR has been the source of pain for most real-time users. It doesn't\n      // support the full CORS spec and is infested with bugs. It cannot connect\n      // cross-scheme, does not send ANY authorization information like Cookies,\n      // Basic Authorization headers etc. Force this off by default to ensure a\n      // stable connection.\n      //\n      enablesXDR: false,\n\n      //\n      // Force timestamps on every single connection. Engine.IO only does this\n      // for polling by default, but WebSockets require an explicit `true`\n      // boolean.\n      //\n      timestampRequests: true,\n      path: this.pathname,\n      transports: !primus.AVOID_WEBSOCKETS\n        ? ['polling', 'websocket']\n        : ['polling']\n    }));\n\n    //\n    // Nuke a growing memory leak as Engine.IO pushes instances in to an exposed\n    // `sockets` array.\n    //\n    if (factory.sockets && factory.sockets.length) {\n      factory.sockets.length = 0;\n    }\n\n    //\n    // Setup the Event handlers.\n    //\n    socket.on('message', onmessage);\n    socket.on('error', onerror);\n    socket.on('close', onclose);\n    socket.on('open', onopen);\n  });\n\n  //\n  // We need to write a new message to the socket.\n  //\n  primus.on('outgoing::data', function write(message) {\n    if (socket) socket.send(message);\n  });\n\n  //\n  // Attempt to reconnect the socket.\n  //\n  primus.on('outgoing::reconnect', function reconnect() {\n    primus.emit('outgoing::open');\n  });\n\n  //\n  // We need to close the socket.\n  //\n  primus.on('outgoing::end', function close() {\n    if (!socket) return;\n\n    socket.removeListener('message', onmessage);\n    socket.removeListener('error', onerror);\n    socket.removeListener('close', onclose);\n    socket.removeListener('open', onopen);\n    socket.close();\n    socket = null;\n  });\n};\nPrimus.prototype.authorization = false;\nPrimus.prototype.pathname = \"/primus\";\nPrimus.prototype.encoder = function encoder(data, fn) {\n  var err;\n\n  try { data = JSON.stringify(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\nPrimus.prototype.decoder = function decoder(data, fn) {\n  var err;\n\n  if ('string' !== typeof data) return fn(err, data);\n\n  try { data = JSON.parse(data); }\n  catch (e) { err = e; }\n\n  fn(err, data);\n};\nPrimus.prototype.version = \"7.1.0\";\n\nif (\n     'undefined' !== typeof document\n  && 'undefined' !== typeof navigator\n) {\n  //\n  // Hack 2: If you press ESC in FireFox it will close all active connections.\n  // Normally this makes sense, when your page is still loading. But versions\n  // before FireFox 22 will close all connections including WebSocket connections\n  // after page load. One way to prevent this is to do a `preventDefault()` and\n  // cancel the operation before it bubbles up to the browsers default handler.\n  // It needs to be added as `keydown` event, if it's added keyup it will not be\n  // able to prevent the connection from being closed.\n  //\n  if (document.addEventListener) {\n    document.addEventListener('keydown', function keydown(e) {\n      if (e.keyCode !== 27 || !e.preventDefault) return;\n\n      e.preventDefault();\n    }, false);\n  }\n\n  //\n  // Hack 3: This is a Mac/Apple bug only, when you're behind a reverse proxy or\n  // have you network settings set to `automatic proxy discovery` the safari\n  // browser will crash when the WebSocket constructor is initialised. There is\n  // no way to detect the usage of these proxies available in JavaScript so we\n  // need to do some nasty browser sniffing. This only affects Safari versions\n  // lower then 5.1.4\n  //\n  var ua = (navigator.userAgent || '').toLowerCase()\n    , parsed = ua.match(/.+(?:rv|it|ra|ie)[/: ](\\d+)\\.(\\d+)(?:\\.(\\d+))?/) || []\n    , version = +[parsed[1], parsed[2]].join('.');\n\n  if (\n       !~ua.indexOf('chrome')\n    && ~ua.indexOf('safari')\n    && version < 534.54\n  ) {\n    Primus.prototype.AVOID_WEBSOCKETS = true;\n  }\n}\n\n//\n// Expose the library.\n//\nmodule.exports = Primus;\n\n},{\"demolish\":1,\"emits\":2,\"eventemitter3\":3,\"inherits\":4,\"querystringify\":7,\"recovery\":8,\"tick-tock\":11,\"url-parse\":12,\"yeast\":13}]},{},[14])(14);\n  return Primus;\n},\n[\nfunction (Primus) {\n(function(f){var g;if(typeof window!=='undefined'){g=window}else if(typeof self!=='undefined'){g=self}g.eio=f()})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\nmodule.exports = _dereq_('./socket');\n\n/**\n * Exports parser\n *\n * @api public\n *\n */\nmodule.exports.parser = _dereq_('engine.io-parser');\n\n},{\"./socket\":2,\"engine.io-parser\":16}],2:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar transports = _dereq_('./transports/index');\nvar Emitter = _dereq_('component-emitter');\n\nvar index = _dereq_('indexof');\nvar parser = _dereq_('engine.io-parser');\nvar parseuri = _dereq_('parseuri');\nvar parsejson = _dereq_('parsejson');\nvar parseqs = _dereq_('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket (uri, opts) {\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' === typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.hostname = uri.host;\n    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  } else if (opts.host) {\n    opts.hostname = parseuri(opts.host).host;\n  }\n\n  this.secure = null != opts.secure ? opts.secure\n    : (global.location && 'https:' === location.protocol);\n\n  if (opts.hostname && !opts.port) {\n    // if no port is specified manually, use the protocol default\n    opts.port = this.secure ? '443' : '80';\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port\n      ? location.port\n      : (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.transportOptions = opts.transportOptions || {};\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.prevBufferLen = 0;\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n\n  if (true === this.perMessageDeflate) this.perMessageDeflate = {};\n  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {\n    this.perMessageDeflate.threshold = 1024;\n  }\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;\n  this.forceNode = !!opts.forceNode;\n\n  // other options for Node.js client\n  var freeGlobal = typeof global === 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {\n      this.extraHeaders = opts.extraHeaders;\n    }\n\n    if (opts.localAddress) {\n      this.localAddress = opts.localAddress;\n    }\n  }\n\n  // set on handshake\n  this.id = null;\n  this.upgrades = null;\n  this.pingInterval = null;\n  this.pingTimeout = null;\n\n  // set on heartbeat\n  this.pingIntervalTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = _dereq_('./transport');\nSocket.transports = _dereq_('./transports/index');\nSocket.parser = _dereq_('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // per-transport options\n  var options = this.transportOptions[name] || {};\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    query: query,\n    socket: this,\n    agent: options.agent || this.agent,\n    hostname: options.hostname || this.hostname,\n    port: options.port || this.port,\n    secure: options.secure || this.secure,\n    path: options.path || this.path,\n    forceJSONP: options.forceJSONP || this.forceJSONP,\n    jsonp: options.jsonp || this.jsonp,\n    forceBase64: options.forceBase64 || this.forceBase64,\n    enablesXDR: options.enablesXDR || this.enablesXDR,\n    timestampRequests: options.timestampRequests || this.timestampRequests,\n    timestampParam: options.timestampParam || this.timestampParam,\n    policyPort: options.policyPort || this.policyPort,\n    pfx: options.pfx || this.pfx,\n    key: options.key || this.key,\n    passphrase: options.passphrase || this.passphrase,\n    cert: options.cert || this.cert,\n    ca: options.ca || this.ca,\n    ciphers: options.ciphers || this.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,\n    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,\n    extraHeaders: options.extraHeaders || this.extraHeaders,\n    forceNode: options.forceNode || this.forceNode,\n    localAddress: options.localAddress || this.localAddress,\n    requestTimeout: options.requestTimeout || this.requestTimeout,\n    protocols: options.protocols || void (0)\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {\n    transport = 'websocket';\n  } else if (0 === this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function () {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  var self = this;\n\n  if (this.transport) {\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function () {\n    self.onDrain();\n  })\n  .on('packet', function (packet) {\n    self.onPacket(packet);\n  })\n  .on('error', function (e) {\n    self.onError(e);\n  })\n  .on('close', function () {\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  var transport = this.createTransport(name, { probe: 1 });\n  var failed = false;\n  var self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen () {\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' === msg.type && 'probe' === msg.data) {\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' === transport.name;\n\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' === self.readyState) return;\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport () {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  // Handle any error that happens while probing\n  function onerror (err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose () {\n    onerror('transport closed');\n  }\n\n  // When the socket is closed while we're probing\n  function onclose () {\n    onerror('socket closed');\n  }\n\n  // When the socket is upgraded while we're probing\n  function onupgrade (to) {\n    if (transport && to.name !== transport.name) {\n      freezeTransport();\n    }\n  }\n\n  // Remove all listeners on the transport and on self\n  function cleanup () {\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' === this.readyState && this.upgrade && this.transport.pause) {\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' === this.readyState || 'open' === this.readyState ||\n      'closing' === this.readyState) {\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        this.emit('pong');\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.onError(err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if ('closed' === this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' === self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api private\n*/\n\nSocket.prototype.ping = function () {\n  var self = this;\n  this.sendPacket('ping', function () {\n    self.emit('ping');\n  });\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function () {\n  this.writeBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (0 === this.writeBuffer.length) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @param {Object} options.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, options, fn) {\n  this.sendPacket('message', msg, options, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Object} options.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, fn) {\n  if ('function' === typeof data) {\n    fn = data;\n    data = undefined;\n  }\n\n  if ('function' === typeof options) {\n    fn = options;\n    options = null;\n  }\n\n  if ('closing' === this.readyState || 'closed' === this.readyState) {\n    return;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  var packet = {\n    type: type,\n    data: data,\n    options: options\n  };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  if (fn) this.once('flush', fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function () {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  function close () {\n    self.onClose('forced close');\n    self.transport.close();\n  }\n\n  function cleanupAndClose () {\n    self.removeListener('upgrade', cleanupAndClose);\n    self.removeListener('upgradeError', cleanupAndClose);\n    close();\n  }\n\n  function waitForUpgrade () {\n    // wait for upgrade to finish since we can't send packets while pausing a transport\n    self.once('upgrade', cleanupAndClose);\n    self.once('upgradeError', cleanupAndClose);\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n\n    // clean buffers after, so users can still\n    // grab the buffers on `close` event\n    self.writeBuffer = [];\n    self.prevBufferLen = 0;\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i < j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./transport\":3,\"./transports/index\":4,\"component-emitter\":14,\"engine.io-parser\":16,\"indexof\":21,\"parsejson\":23,\"parseqs\":24,\"parseuri\":25}],3:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar parser = _dereq_('engine.io-parser');\nvar Emitter = _dereq_('component-emitter');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Transport;\n\n/**\n * Transport abstract constructor.\n *\n * @param {Object} options.\n * @api private\n */\n\nfunction Transport (opts) {\n  this.path = opts.path;\n  this.hostname = opts.hostname;\n  this.port = opts.port;\n  this.secure = opts.secure;\n  this.query = opts.query;\n  this.timestampParam = opts.timestampParam;\n  this.timestampRequests = opts.timestampRequests;\n  this.readyState = '';\n  this.agent = opts.agent || false;\n  this.socket = opts.socket;\n  this.enablesXDR = opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n  this.forceNode = opts.forceNode;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n  this.localAddress = opts.localAddress;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Transport.prototype);\n\n/**\n * Emits an error.\n *\n * @param {String} str\n * @return {Transport} for chaining\n * @api public\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  var err = new Error(msg);\n  err.type = 'TransportError';\n  err.description = desc;\n  this.emit('error', err);\n  return this;\n};\n\n/**\n * Opens the transport.\n *\n * @api public\n */\n\nTransport.prototype.open = function () {\n  if ('closed' === this.readyState || '' === this.readyState) {\n    this.readyState = 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function () {\n  if ('opening' === this.readyState || 'open' === this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n\n/**\n * Sends multiple packets.\n *\n * @param {Array} packets\n * @api private\n */\n\nTransport.prototype.send = function (packets) {\n  if ('open' === this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n\n/**\n * Called upon open\n *\n * @api private\n */\n\nTransport.prototype.onOpen = function () {\n  this.readyState = 'open';\n  this.writable = true;\n  this.emit('open');\n};\n\n/**\n * Called with data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function (data) {\n  var packet = parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n\n/**\n * Called with a decoded packet.\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n\n},{\"component-emitter\":14,\"engine.io-parser\":16}],4:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\nvar XHR = _dereq_('./polling-xhr');\nvar JSONP = _dereq_('./polling-jsonp');\nvar websocket = _dereq_('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling-jsonp\":5,\"./polling-xhr\":6,\"./websocket\":8,\"xmlhttprequest-ssl\":9}],5:[function(_dereq_,module,exports){\n(function (global){\n\n/**\n * Module requirements.\n */\n\nvar Polling = _dereq_('./polling');\nvar inherit = _dereq_('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports = JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline = /\\n/g;\nvar rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query = this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    if (!global.___eio) global.___eio = [];\n    callbacks = global.___eio;\n  }\n\n  // callback identifier\n  this.index = callbacks.length;\n\n  // add callback to jsonp global\n  var self = this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j = this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (global.document && global.addEventListener) {\n    global.addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror = empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary = false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose = function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form = null;\n    this.iframe = null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll = function () {\n  var self = this;\n  var script = document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  script.async = true;\n  script.src = this.uri();\n  script.onerror = function (e) {\n    self.onError('jsonp poll error', e);\n  };\n\n  var insertAt = document.getElementsByTagName('script')[0];\n  if (insertAt) {\n    insertAt.parentNode.insertBefore(script, insertAt);\n  } else {\n    (document.head || document.body).appendChild(script);\n  }\n  this.script = script;\n\n  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite = function (data, fn) {\n  var self = this;\n\n  if (!this.form) {\n    var form = document.createElement('form');\n    var area = document.createElement('textarea');\n    var id = this.iframeId = 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className = 'socketio';\n    form.style.position = 'absolute';\n    form.style.top = '-1000px';\n    form.style.left = '-1000px';\n    form.target = id;\n    form.method = 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name = 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form = form;\n    this.area = area;\n  }\n\n  this.form.action = this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n      var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n      iframe = document.createElement(html);\n    } catch (e) {\n      iframe = document.createElement('iframe');\n      iframe.name = self.iframeId;\n      iframe.src = 'javascript:0';\n    }\n\n    iframe.id = self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe = iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data = data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value = data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch (e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange = function () {\n      if (self.iframe.readyState === 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload = complete;\n  }\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling\":7,\"component-inherit\":15}],6:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\nvar Polling = _dereq_('./polling');\nvar Emitter = _dereq_('component-emitter');\nvar inherit = _dereq_('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty () {}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR (opts) {\n  Polling.call(this, opts);\n  this.requestTimeout = opts.requestTimeout;\n  this.extraHeaders = opts.extraHeaders;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = opts.hostname !== global.location.hostname ||\n      port !== opts.port;\n    this.xs = opts.secure !== isSSL;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function (opts) {\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  opts.requestTimeout = this.requestTimeout;\n\n  // other options for Node.js client\n  opts.extraHeaders = this.extraHeaders;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function (data, fn) {\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function (err) {\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function () {\n  var req = this.request();\n  var self = this;\n  req.on('data', function (data) {\n    self.onData(data);\n  });\n  req.on('error', function (err) {\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request (opts) {\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined !== opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n  this.requestTimeout = opts.requestTimeout;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  // other options for Node.js client\n  this.extraHeaders = opts.extraHeaders;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function () {\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    xhr.open(this.method, this.uri, this.async);\n    try {\n      if (this.extraHeaders) {\n        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n        for (var i in this.extraHeaders) {\n          if (this.extraHeaders.hasOwnProperty(i)) {\n            xhr.setRequestHeader(i, this.extraHeaders[i]);\n          }\n        }\n      }\n    } catch (e) {}\n    if (this.supportsBinary) {\n      // This has to be done after open because Firefox is stupid\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n      xhr.responseType = 'arraybuffer';\n    }\n\n    if ('POST' === this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    try {\n      xhr.setRequestHeader('Accept', '*/*');\n    } catch (e) {}\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.requestTimeout) {\n      xhr.timeout = this.requestTimeout;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function () {\n        self.onLoad();\n      };\n      xhr.onerror = function () {\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function () {\n        if (4 !== xhr.readyState) return;\n        if (200 === xhr.status || 1223 === xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function () {\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function () {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function () {\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function (data) {\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function (err) {\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function (fromError) {\n  if ('undefined' === typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch (e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function () {\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n    } catch (e) {}\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response || this.xhr.responseText;\n    } else {\n      if (!this.supportsBinary) {\n        data = this.xhr.responseText;\n      } else {\n        try {\n          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));\n        } catch (e) {\n          var ui8Arr = new Uint8Array(this.xhr.response);\n          var dataArray = [];\n          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {\n            dataArray.push(ui8Arr[idx]);\n          }\n\n          data = String.fromCharCode.apply(null, dataArray);\n        }\n      }\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function () {\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function () {\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (global.document) {\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler () {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling\":7,\"component-emitter\":14,\"component-inherit\":15,\"xmlhttprequest-ssl\":9}],7:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Transport = _dereq_('../transport');\nvar parseqs = _dereq_('parseqs');\nvar parser = _dereq_('engine.io-parser');\nvar inherit = _dereq_('component-inherit');\nvar yeast = _dereq_('yeast');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function () {\n  var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function () {\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function (onPause) {\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause () {\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      total++;\n      this.once('pollComplete', function () {\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      total++;\n      this.once('drain', function () {\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function () {\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function (data) {\n  var self = this;\n  var callback = function (packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' === self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' === packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, this.supportsBinary, callback);\n\n  // if an event did not trigger closing\n  if ('closed' !== this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' === this.readyState) {\n      this.poll();\n    } else {\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function () {\n  var self = this;\n\n  function close () {\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' === this.readyState) {\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n  var callbackfn = function () {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  parser.encodePayload(packets, this.supportsBinary, function (data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' === schema && Number(this.port) !== 443) ||\n     ('http' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\n},{\"../transport\":3,\"component-inherit\":15,\"engine.io-parser\":16,\"parseqs\":24,\"xmlhttprequest-ssl\":9,\"yeast\":26}],8:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar Transport = _dereq_('../transport');\nvar parser = _dereq_('engine.io-parser');\nvar parseqs = _dereq_('parseqs');\nvar inherit = _dereq_('component-inherit');\nvar yeast = _dereq_('yeast');\n\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\nvar NodeWebSocket;\nif (typeof window === 'undefined') {\n  try {\n    NodeWebSocket = _dereq_('ws');\n  } catch (e) { }\n}\n\n/**\n * Get either the `WebSocket` or `MozWebSocket` globals\n * in the browser or try to resolve WebSocket-compatible\n * interface exposed by `ws` for Node-like environment.\n */\n\nvar WebSocket = BrowserWebSocket;\nif (!WebSocket && typeof window === 'undefined') {\n  WebSocket = NodeWebSocket;\n}\n\n/**\n * Module exports.\n */\n\nmodule.exports = WS;\n\n/**\n * WebSocket transport constructor.\n *\n * @api {Object} connection options\n * @api public\n */\n\nfunction WS (opts) {\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  this.perMessageDeflate = opts.perMessageDeflate;\n  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;\n  this.protocols = opts.protocols;\n  if (!this.usingBrowserWebSocket) {\n    WebSocket = NodeWebSocket;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(WS, Transport);\n\n/**\n * Transport name.\n *\n * @api public\n */\n\nWS.prototype.name = 'websocket';\n\n/*\n * WebSockets support binary\n */\n\nWS.prototype.supportsBinary = true;\n\n/**\n * Opens socket.\n *\n * @api private\n */\n\nWS.prototype.doOpen = function () {\n  if (!this.check()) {\n    // let probe timeout\n    return;\n  }\n\n  var uri = this.uri();\n  var protocols = this.protocols;\n  var opts = {\n    agent: this.agent,\n    perMessageDeflate: this.perMessageDeflate\n  };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  if (this.extraHeaders) {\n    opts.headers = this.extraHeaders;\n  }\n  if (this.localAddress) {\n    opts.localAddress = this.localAddress;\n  }\n\n  try {\n    this.ws = this.usingBrowserWebSocket ? (protocols ? new WebSocket(uri, protocols) : new WebSocket(uri)) : new WebSocket(uri, protocols, opts);\n  } catch (err) {\n    return this.emit('error', err);\n  }\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  if (this.ws.supports && this.ws.supports.binary) {\n    this.supportsBinary = true;\n    this.ws.binaryType = 'nodebuffer';\n  } else {\n    this.ws.binaryType = 'arraybuffer';\n  }\n\n  this.addEventListeners();\n};\n\n/**\n * Adds event listeners to the socket\n *\n * @api private\n */\n\nWS.prototype.addEventListeners = function () {\n  var self = this;\n\n  this.ws.onopen = function () {\n    self.onOpen();\n  };\n  this.ws.onclose = function () {\n    self.onClose();\n  };\n  this.ws.onmessage = function (ev) {\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function (e) {\n    self.onError('websocket error', e);\n  };\n};\n\n/**\n * Writes data to socket.\n *\n * @param {Array} array of packets.\n * @api private\n */\n\nWS.prototype.write = function (packets) {\n  var self = this;\n  this.writable = false;\n\n  // encodePacket efficient as it uses WS framing\n  // no need for encodePayload\n  var total = packets.length;\n  for (var i = 0, l = total; i < l; i++) {\n    (function (packet) {\n      parser.encodePacket(packet, self.supportsBinary, function (data) {\n        if (!self.usingBrowserWebSocket) {\n          // always create a new object (GH-437)\n          var opts = {};\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (self.perMessageDeflate) {\n            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;\n            if (len < self.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (self.usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            self.ws.send(data);\n          } else {\n            self.ws.send(data, opts);\n          }\n        } catch (e) {\n        }\n\n        --total || done();\n      });\n    })(packets[i]);\n  }\n\n  function done () {\n    self.emit('flush');\n\n    // fake drain\n    // defer to next tick to allow Socket to clear writeBuffer\n    setTimeout(function () {\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n};\n\n/**\n * Called upon close\n *\n * @api private\n */\n\nWS.prototype.onClose = function () {\n  Transport.prototype.onClose.call(this);\n};\n\n/**\n * Closes socket.\n *\n * @api private\n */\n\nWS.prototype.doClose = function () {\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nWS.prototype.uri = function () {\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  // avoid port if default for schema\n  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||\n    ('ws' === schema && Number(this.port) !== 80))) {\n    port = ':' + this.port;\n  }\n\n  // append timestamp to URI\n  if (this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  // communicate binary support capabilities\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\n/**\n * Feature detection for WebSocket.\n *\n * @return {Boolean} whether this transport is available.\n * @api public\n */\n\nWS.prototype.check = function () {\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../transport\":3,\"component-inherit\":15,\"engine.io-parser\":16,\"parseqs\":24,\"ws\":undefined,\"yeast\":26}],9:[function(_dereq_,module,exports){\n(function (global){\n// browser shim for xmlhttprequest module\n\nvar hasCORS = _dereq_('has-cors');\n\nmodule.exports = function (opts) {\n  var xdomain = opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  var xscheme = opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  var enablesXDR = opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) { }\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) { }\n\n  if (!xdomain) {\n    try {\n      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');\n    } catch (e) { }\n  }\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"has-cors\":20}],10:[function(_dereq_,module,exports){\nmodule.exports = after\n\nfunction after(count, callback, err_cb) {\n    var bail = false\n    err_cb = err_cb || noop\n    proxy.count = count\n\n    return (count === 0) ? callback() : proxy\n\n    function proxy(err, result) {\n        if (proxy.count <= 0) {\n            throw new Error('after called too many times')\n        }\n        --proxy.count\n\n        // after first error, rest are passed to err_cb\n        if (err) {\n            bail = true\n            callback(err)\n            // future error callbacks will go to error handler\n            callback = err_cb\n        } else if (proxy.count === 0 && !bail) {\n            callback(null, result)\n        }\n    }\n}\n\nfunction noop() {}\n\n},{}],11:[function(_dereq_,module,exports){\n/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n\n},{}],12:[function(_dereq_,module,exports){\n/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n\n},{}],13:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Create a blob builder even when vendor prefixes exist\n */\n\nvar BlobBuilder = global.BlobBuilder\n  || global.WebKitBlobBuilder\n  || global.MSBlobBuilder\n  || global.MozBlobBuilder;\n\n/**\n * Check if Blob constructor is supported\n */\n\nvar blobSupported = (function() {\n  try {\n    var a = new Blob(['hi']);\n    return a.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if Blob constructor supports ArrayBufferViews\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\n */\n\nvar blobSupportsArrayBufferView = blobSupported && (function() {\n  try {\n    var b = new Blob([new Uint8Array([1,2])]);\n    return b.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if BlobBuilder is supported\n */\n\nvar blobBuilderSupported = BlobBuilder\n  && BlobBuilder.prototype.append\n  && BlobBuilder.prototype.getBlob;\n\n/**\n * Helper function that maps ArrayBufferViews to ArrayBuffers\n * Used by BlobBuilder constructor and old browsers that didn't\n * support it in the Blob constructor.\n */\n\nfunction mapArrayBufferViews(ary) {\n  for (var i = 0; i < ary.length; i++) {\n    var chunk = ary[i];\n    if (chunk.buffer instanceof ArrayBuffer) {\n      var buf = chunk.buffer;\n\n      // if this is a subarray, make a copy so we only\n      // include the subarray region from the underlying buffer\n      if (chunk.byteLength !== buf.byteLength) {\n        var copy = new Uint8Array(chunk.byteLength);\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n        buf = copy.buffer;\n      }\n\n      ary[i] = buf;\n    }\n  }\n}\n\nfunction BlobBuilderConstructor(ary, options) {\n  options = options || {};\n\n  var bb = new BlobBuilder();\n  mapArrayBufferViews(ary);\n\n  for (var i = 0; i < ary.length; i++) {\n    bb.append(ary[i]);\n  }\n\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n};\n\nfunction BlobConstructor(ary, options) {\n  mapArrayBufferViews(ary);\n  return new Blob(ary, options || {});\n};\n\nmodule.exports = (function() {\n  if (blobSupported) {\n    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n  } else if (blobBuilderSupported) {\n    return BlobBuilderConstructor;\n  } else {\n    return undefined;\n  }\n})();\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],14:[function(_dereq_,module,exports){\n\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n\n},{}],15:[function(_dereq_,module,exports){\n\nmodule.exports = function(a, b){\n  var fn = function(){};\n  fn.prototype = b.prototype;\n  a.prototype = new fn;\n  a.prototype.constructor = a;\n};\n},{}],16:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar keys = _dereq_('./keys');\nvar hasBinary = _dereq_('has-binary2');\nvar sliceBuffer = _dereq_('arraybuffer.slice');\nvar after = _dereq_('after');\nvar utf8 = _dereq_('./utf8');\n\nvar base64encoder;\nif (global && global.ArrayBuffer) {\n  base64encoder = _dereq_('base64-arraybuffer');\n}\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = _dereq_('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if (typeof utf8encode === 'function') {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof global.Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  if (data === undefined) {\n    return err;\n  }\n  // String data\n  if (typeof data === 'string') {\n    if (data.charAt(0) === 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      data = tryDecode(data);\n      if (data === false) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\nfunction tryDecode(data) {\n  try {\n    data = utf8.decode(data, { strict: false });\n  } catch (e) {\n    return false;\n  }\n  return data;\n}\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!base64encoder) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary === 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, utf8decode, callback) {\n  if (typeof data !== 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  if (typeof utf8decode === 'function') {\n    callback = utf8decode;\n    utf8decode = null;\n  }\n\n  var packet;\n  if (data === '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  if (utf8decode) {\n    data = tryDecode(data);\n    if (data === false) {\n      return callback(err, 0, 1);\n    }\n  }\n\n  var length = '', n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (chr !== ':') {\n      length += chr;\n      continue;\n    }\n\n    if (length === '' || (length != (n = Number(length)))) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    msg = data.substr(i + 1, n);\n\n    if (length != msg.length) {\n      // parser error - ignoring payload\n      return callback(err, 0, 1);\n    }\n\n    if (msg.length) {\n      packet = exports.decodePacket(msg, binaryType, false);\n\n      if (err.type === packet.type && err.data === packet.data) {\n        // parser error in individual packet - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      var ret = callback(packet, i + n, l);\n      if (false === ret) return;\n    }\n\n    // advance cursor\n    i += n;\n    length = '';\n  }\n\n  if (length !== '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] === 255) break;\n\n      // 310 = char length of Number.MAX_VALUE\n      if (msgLength.length > 310) {\n        return callback(err, 0, 1);\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./keys\":17,\"./utf8\":18,\"after\":10,\"arraybuffer.slice\":11,\"base64-arraybuffer\":12,\"blob\":13,\"has-binary2\":19}],17:[function(_dereq_,module,exports){\n\n/**\n * Gets the keys for an object.\n *\n * @return {Array} keys\n * @api private\n */\n\nmodule.exports = Object.keys || function keys (obj){\n  var arr = [];\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var i in obj) {\n    if (has.call(obj, i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n},{}],18:[function(_dereq_,module,exports){\n(function (global){\n/*! https://mths.be/utf8js v2.1.2 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from https://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction checkScalarValue(codePoint, strict) {\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n\t\t\tif (strict) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n\t\t\t\t\t' is not a scalar value'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint, strict) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tif (!checkScalarValue(codePoint, strict)) {\n\t\t\t\tcodePoint = 0xFFFD;\n\t\t\t}\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string, opts) {\n\t\topts = opts || {};\n\t\tvar strict = false !== opts.strict;\n\n\t\tvar codePoints = ucs2decode(string);\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint, strict);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol(strict) {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\treturn checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString, opts) {\n\t\topts = opts || {};\n\t\tvar strict = false !== opts.strict;\n\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol(strict)) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 = {\n\t\t'version': '2.1.2',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\tif (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object = {};\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 = utf8;\n\t}\n\n}(this));\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],19:[function(_dereq_,module,exports){\n(function (global){\n/* global Blob File */\n\n/*\n * Module requirements.\n */\n\nvar isArray = _dereq_('isarray');\n\n/**\n * Module exports.\n */\n\nmodule.exports = hasBinary;\n\n/**\n * Checks for binary data.\n *\n * Supports Buffer, ArrayBuffer, Blob and File.\n *\n * @param {Object} anything\n * @api public\n */\n\nfunction hasBinary (obj) {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  if (isArray(obj)) {\n    for (var i = 0, l = obj.length; i < l; i++) {\n      if (hasBinary(obj[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  if ((typeof global.Buffer === 'function' && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||\n     (typeof global.ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||\n     (typeof global.Blob === 'function' && obj instanceof Blob) ||\n     (typeof global.File === 'function' && obj instanceof File)\n    ) {\n    return true;\n  }\n\n  // see: https://github.com/Automattic/has-binary/pull/4\n  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {\n    return hasBinary(obj.toJSON(), true);\n  }\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"isarray\":22}],20:[function(_dereq_,module,exports){\n\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports = typeof XMLHttpRequest !== 'undefined' &&\n    'withCredentials' in new XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports = false;\n}\n\n},{}],21:[function(_dereq_,module,exports){\n\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};\n},{}],22:[function(_dereq_,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],23:[function(_dereq_,module,exports){\n(function (global){\n/**\r\n * JSON parse.\r\n *\r\n * @see Based on jQuery#parseJSON (MIT) and JSON2\r\n * @api private\r\n */\r\n\r\nvar rvalidchars = /^[\\],:{}\\s]*$/;\r\nvar rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\r\nvar rvalidtokens = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\r\nvar rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g;\r\nvar rtrimLeft = /^\\s+/;\r\nvar rtrimRight = /\\s+$/;\r\n\r\nmodule.exports = function parsejson(data) {\r\n  if ('string' != typeof data || !data) {\r\n    return null;\r\n  }\r\n\r\n  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\r\n\r\n  // Attempt to parse using the native JSON parser first\r\n  if (global.JSON && JSON.parse) {\r\n    return JSON.parse(data);\r\n  }\r\n\r\n  if (rvalidchars.test(data.replace(rvalidescape, '@')\r\n      .replace(rvalidtokens, ']')\r\n      .replace(rvalidbraces, ''))) {\r\n    return (new Function('return ' + data))();\r\n  }\r\n};\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],24:[function(_dereq_,module,exports){\n/**\r\n * Compiles a querystring\r\n * Returns string representation of the object\r\n *\r\n * @param {Object}\r\n * @api private\r\n */\r\n\r\nexports.encode = function (obj) {\r\n  var str = '';\r\n\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      if (str.length) str += '&';\r\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\r\n    }\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * Parses a simple querystring into an object\r\n *\r\n * @param {String} qs\r\n * @api private\r\n */\r\n\r\nexports.decode = function(qs){\r\n  var qry = {};\r\n  var pairs = qs.split('&');\r\n  for (var i = 0, l = pairs.length; i < l; i++) {\r\n    var pair = pairs[i].split('=');\r\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n  }\r\n  return qry;\r\n};\r\n\n},{}],25:[function(_dereq_,module,exports){\n/**\r\n * Parses an URI\r\n *\r\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\r\n * @api private\r\n */\r\n\r\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\r\n\r\nvar parts = [\r\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\r\n];\r\n\r\nmodule.exports = function parseuri(str) {\r\n    var src = str,\r\n        b = str.indexOf('['),\r\n        e = str.indexOf(']');\r\n\r\n    if (b != -1 && e != -1) {\r\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\r\n    }\r\n\r\n    var m = re.exec(str || ''),\r\n        uri = {},\r\n        i = 14;\r\n\r\n    while (i--) {\r\n        uri[parts[i]] = m[i] || '';\r\n    }\r\n\r\n    if (b != -1 && e != -1) {\r\n        uri.source = src;\r\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\r\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\r\n        uri.ipv6uri = true;\r\n    }\r\n\r\n    return uri;\r\n};\r\n\n},{}],26:[function(_dereq_,module,exports){\n'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n\n},{}],27:[function(_dereq_,module,exports){\n\nmodule.exports = _dereq_('./lib/index');\n\n},{\"./lib/index\":1}]},{},[27])(27)\n});\n}\n]);"
          },
          "redirectURL": "",
          "headersSize": 273,
          "bodySize": 176321,
          "_transferSize": 176594
        },
        "cache": {},
        "timings": {
          "blocked": 1.46900000981987,
          "dns": -1,
          "connect": -1,
          "send": 0.07900013588368004,
          "wait": 1.27999996766448,
          "receive": 1.2219999916851565,
          "ssl": -1
        },
        "serverIPAddress": "127.0.0.1",
        "connection": "101562",
        "pageref": "page_107"
      },
      {
        "startedDateTime": "2017-08-28T14:04:09.155Z",
        "time": 5.924999946728349,
        "request": {
          "method": "GET",
          "url": "https://espirit.husker:8001/primus/?_primuscb=LufA210&EIO=3&transport=polling&t=LufA212&b64=1",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "espirit.husker:8001"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "https://espirit.husker:8001/engine.io/"
            },
            {
              "name": "Cookie",
              "value": "io=Mlz-B0JALT9Lg99MAAAC"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [
            {
              "name": "_primuscb",
              "value": "LufA210"
            },
            {
              "name": "EIO",
              "value": "3"
            },
            {
              "name": "transport",
              "value": "polling"
            },
            {
              "name": "t",
              "value": "LufA212"
            },
            {
              "name": "b64",
              "value": "1"
            }
          ],
          "cookies": [
            {
              "name": "io",
              "value": "Mlz-B0JALT9Lg99MAAAC",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 476,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Date",
              "value": "Mon, 28 Aug 2017 14:04:09 GMT"
            },
            {
              "name": "Content-Type",
              "value": "text/plain; charset=UTF-8"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Set-Cookie",
              "value": "io=xwAbo9q4SCrlZ9pfAAAA; Path=/; HttpOnly"
            },
            {
              "name": "Cache-Control",
              "value": "no-store, no-cache, must-revalidate, max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "100"
            }
          ],
          "cookies": [
            {
              "name": "io",
              "value": "xwAbo9q4SCrlZ9pfAAAA",
              "path": "/",
              "expires": null,
              "httpOnly": true,
              "secure": false
            }
          ],
          "content": {
            "size": 100,
            "mimeType": "text/plain",
            "compression": 0,
            "text": "97:0{\"sid\":\"xwAbo9q4SCrlZ9pfAAAA\",\"upgrades\":[\"websocket\"],\"pingInterval\":25000,\"pingTimeout\":60000}"
          },
          "redirectURL": "",
          "headersSize": 310,
          "bodySize": 100,
          "_transferSize": 410
        },
        "cache": {},
        "timings": {
          "blocked": 1.14799989387393,
          "dns": -1,
          "connect": -1,
          "send": 0.06099999882281004,
          "wait": 4.30799997411668,
          "receive": 0.40800007991492837,
          "ssl": -1
        },
        "serverIPAddress": "127.0.0.1",
        "connection": "101562",
        "pageref": "page_107"
      },
      {
        "startedDateTime": "2017-08-28T14:04:09.159Z",
        "time": 4.121999954804778,
        "request": {
          "method": "GET",
          "url": "https://espirit.husker:8001/favicon.ico",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "espirit.husker:8001"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "image/webp,image/apng,image/*,*/*;q=0.8"
            },
            {
              "name": "Referer",
              "value": "https://espirit.husker:8001/engine.io/"
            },
            {
              "name": "Cookie",
              "value": "io=Mlz-B0JALT9Lg99MAAAC"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "Mlz-B0JALT9Lg99MAAAC",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 458,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Mon, 28 Aug 2017 14:04:09 GMT"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "cookies": [],
          "content": {
            "size": 39,
            "mimeType": "text/plain",
            "compression": -11,
            "text": "Mon Aug 28 2017 09:04:08 GMT-0500 (CDT)"
          },
          "redirectURL": "",
          "headersSize": 108,
          "bodySize": 50,
          "_transferSize": 158
        },
        "cache": {},
        "timings": {
          "blocked": 2.22399993799627,
          "dns": -1,
          "connect": -1,
          "send": 0.0690000597387499,
          "wait": 1.4569999184459501,
          "receive": 0.37200003862380804,
          "ssl": -1
        },
        "serverIPAddress": "127.0.0.1",
        "connection": "101562",
        "pageref": "page_107"
      },
      {
        "startedDateTime": "2017-08-28T14:04:09.200Z",
        "time": 0,
        "request": {
          "method": "GET",
          "url": "wss://espirit.husker:8001/primus/?_primuscb=LufA210&EIO=3&transport=websocket&sid=xwAbo9q4SCrlZ9pfAAAA&t=LufA21F&b64=1",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "https://espirit.husker:8001"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "espirit.husker:8001"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "Lo9oV+3xT918TP4Il3gZdg=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Cookie",
              "value": "io=xwAbo9q4SCrlZ9pfAAAA"
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            }
          ],
          "queryString": [
            {
              "name": "_primuscb",
              "value": "LufA210"
            },
            {
              "name": "EIO",
              "value": "3"
            },
            {
              "name": "transport",
              "value": "websocket"
            },
            {
              "name": "sid",
              "value": "xwAbo9q4SCrlZ9pfAAAA"
            },
            {
              "name": "t",
              "value": "LufA21F"
            },
            {
              "name": "b64",
              "value": "1"
            }
          ],
          "cookies": [
            {
              "name": "io",
              "value": "xwAbo9q4SCrlZ9pfAAAA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 662,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "WebSocket-Server",
              "value": "uWebSockets"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "Mx2QPYiuxB2UKDSUWu5Ky659voc="
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 187
          },
          "redirectURL": "",
          "headersSize": 187,
          "bodySize": -187,
          "_transferSize": 0
        },
        "cache": {},
        "timings": {
          "blocked": -1,
          "dns": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "ssl": -1
        },
        "serverIPAddress": "",
        "pageref": "page_107"
      },
      {
        "startedDateTime": "2017-08-28T14:04:09.168Z",
        "time": 35.09800019674003,
        "request": {
          "method": "GET",
          "url": "https://espirit.husker:8001/primus/?_primuscb=LufA210&EIO=3&transport=polling&t=LufA21G&b64=1&sid=xwAbo9q4SCrlZ9pfAAAA",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "espirit.husker:8001"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "https://espirit.husker:8001/engine.io/"
            },
            {
              "name": "Cookie",
              "value": "io=xwAbo9q4SCrlZ9pfAAAA"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [
            {
              "name": "_primuscb",
              "value": "LufA210"
            },
            {
              "name": "EIO",
              "value": "3"
            },
            {
              "name": "transport",
              "value": "polling"
            },
            {
              "name": "t",
              "value": "LufA21G"
            },
            {
              "name": "b64",
              "value": "1"
            },
            {
              "name": "sid",
              "value": "xwAbo9q4SCrlZ9pfAAAA"
            }
          ],
          "cookies": [
            {
              "name": "io",
              "value": "xwAbo9q4SCrlZ9pfAAAA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 501,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Date",
              "value": "Mon, 28 Aug 2017 14:04:09 GMT"
            },
            {
              "name": "Content-Type",
              "value": "text/plain; charset=UTF-8"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Set-Cookie",
              "value": "io=xwAbo9q4SCrlZ9pfAAAA; Path=/; HttpOnly"
            },
            {
              "name": "Cache-Control",
              "value": "no-store, no-cache, must-revalidate, max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "45"
            }
          ],
          "cookies": [
            {
              "name": "io",
              "value": "xwAbo9q4SCrlZ9pfAAAA",
              "path": "/",
              "expires": null,
              "httpOnly": true,
              "secure": false
            }
          ],
          "content": {
            "size": 45,
            "mimeType": "text/plain",
            "compression": 0,
            "text": "42:4\"Mon Aug 28 2017 09:04:09 GMT-0500 (CDT)\""
          },
          "redirectURL": "",
          "headersSize": 309,
          "bodySize": 45,
          "_transferSize": 354
        },
        "cache": {},
        "timings": {
          "blocked": 1.42800016328692,
          "dns": -1,
          "connect": -1,
          "send": 0.054999953135850044,
          "wait": 33.18500006571413,
          "receive": 0.43000001460313086,
          "ssl": -1
        },
        "serverIPAddress": "127.0.0.1",
        "connection": "101562",
        "pageref": "page_107"
      },
      {
        "startedDateTime": "2017-08-28T14:04:09.206Z",
        "time": 103.56099996715784,
        "request": {
          "method": "GET",
          "url": "https://espirit.husker:8001/primus/?_primuscb=LufA210&EIO=3&transport=polling&t=LufA21r&b64=1&sid=xwAbo9q4SCrlZ9pfAAAA",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "espirit.husker:8001"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.8"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "https://espirit.husker:8001/engine.io/"
            },
            {
              "name": "Cookie",
              "value": "io=xwAbo9q4SCrlZ9pfAAAA"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [
            {
              "name": "_primuscb",
              "value": "LufA210"
            },
            {
              "name": "EIO",
              "value": "3"
            },
            {
              "name": "transport",
              "value": "polling"
            },
            {
              "name": "t",
              "value": "LufA21r"
            },
            {
              "name": "b64",
              "value": "1"
            },
            {
              "name": "sid",
              "value": "xwAbo9q4SCrlZ9pfAAAA"
            }
          ],
          "cookies": [
            {
              "name": "io",
              "value": "xwAbo9q4SCrlZ9pfAAAA",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 501,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Date",
              "value": "Mon, 28 Aug 2017 14:04:09 GMT"
            },
            {
              "name": "Content-Type",
              "value": "text/plain; charset=UTF-8"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Set-Cookie",
              "value": "io=xwAbo9q4SCrlZ9pfAAAA; Path=/; HttpOnly"
            },
            {
              "name": "Cache-Control",
              "value": "no-store, no-cache, must-revalidate, max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "3"
            }
          ],
          "cookies": [
            {
              "name": "io",
              "value": "xwAbo9q4SCrlZ9pfAAAA",
              "path": "/",
              "expires": null,
              "httpOnly": true,
              "secure": false
            }
          ],
          "content": {
            "size": 3,
            "mimeType": "text/plain",
            "compression": 0,
            "text": "1:6"
          },
          "redirectURL": "",
          "headersSize": 308,
          "bodySize": 3,
          "_transferSize": 311
        },
        "cache": {},
        "timings": {
          "blocked": 1.03299994952977,
          "dns": -1,
          "connect": -1,
          "send": 0.10700011625886008,
          "wait": 102.09299996495237,
          "receive": 0.32799993641684466,
          "ssl": -1
        },
        "serverIPAddress": "127.0.0.1",
        "connection": "101562",
        "pageref": "page_107"
      }
    ]
  }
}